; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-matrix -mattr=+experimental-v,+d,+experimental-zfh \
; RUN:   -verify-machineinstrs < %s | FileCheck %s

declare <vscale x 64 x half> @llvm.riscv.mlc.m.nxv64f16(
  <vscale x 64 x half>*,
  i64)

declare void @llvm.riscv.msc.m.nxv64f16(
  <vscale x 64 x half>,
  <vscale x 64 x half>*,
  i64)

declare <vscale x 64 x half> @llvm.riscv.mfsqrt.m.nxv64f16(
  <vscale x 64 x half>
)

define void @intrinsic_mfsqrt_mm_nxv64f16(<vscale x 64 x half>* %0, i64 %1) {
; CHECK-LABEL: intrinsic_mfsqrt_mm_nxv64f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce16.m acc0, (a0), a1
; CHECK-NEXT:    mfsqrt.m acc0, acc0
; CHECK-NEXT:    msce16.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 64 x half> @llvm.riscv.mlc.m.nxv64f16(
    <vscale x 64 x half>* %0,
    i64 %1
  )

  %3 = call <vscale x 64 x half> @llvm.riscv.mfsqrt.m.nxv64f16(
    <vscale x 64 x half> %2
  )

  call void @llvm.riscv.msc.m.nxv64f16(
    <vscale x 64 x half> %3,
    <vscale x 64 x half>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 64 x half> @llvm.riscv.mfsqrt.hf.m.nxv64f16(
  <vscale x 64 x half>
)

define void @intrinsic_mfsqrt_hf_m_nxv64f16(<vscale x 64 x half>* %0, i64 %1) {
; CHECK-LABEL: intrinsic_mfsqrt_hf_m_nxv64f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce16.m acc0, (a0), a1
; CHECK-NEXT:    mfsqrt.hf.m acc0, acc0
; CHECK-NEXT:    msce16.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 64 x half> @llvm.riscv.mlc.m.nxv64f16(
    <vscale x 64 x half>* %0,
    i64 %1
  )

  %3 = call <vscale x 64 x half> @llvm.riscv.mfsqrt.hf.m.nxv64f16(
    <vscale x 64 x half> %2
  )

  call void @llvm.riscv.msc.m.nxv64f16(
    <vscale x 64 x half> %3,
    <vscale x 64 x half>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 32 x float> @llvm.riscv.mlc.m.nxv32f32(
  <vscale x 32 x float>*,
  i64)

declare void @llvm.riscv.msc.m.nxv32f32(
  <vscale x 32 x float>,
  <vscale x 32 x float>*,
  i64)

declare <vscale x 32 x float> @llvm.riscv.mfsqrt.m.nxv32f32(
  <vscale x 32 x float>
)

define void @intrinsic_mfsqrt_m_nxv32f32(<vscale x 32 x float>* %0, i64 %1) {
; CHECK-LABEL: intrinsic_mfsqrt_m_nxv32f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce32.m acc0, (a0), a1
; CHECK-NEXT:    mfsqrt.m acc0, acc0
; CHECK-NEXT:    msce32.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 32 x float> @llvm.riscv.mlc.m.nxv32f32(
    <vscale x 32 x float>* %0,
    i64 %1
  )

  %3 = call <vscale x 32 x float> @llvm.riscv.mfsqrt.m.nxv32f32(
    <vscale x 32 x float> %2
  )

  call void @llvm.riscv.msc.m.nxv32f32(
    <vscale x 32 x float> %3,
    <vscale x 32 x float>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 32 x float> @llvm.riscv.mfsqrt.f.m.nxv32f32(
  <vscale x 32 x float>
)

define void @intrinsic_mfsqrt_f_m_nxv32f32(<vscale x 32 x float>* %0, i64 %1) {
; CHECK-LABEL: intrinsic_mfsqrt_f_m_nxv32f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce32.m acc0, (a0), a1
; CHECK-NEXT:    mfsqrt.f.m acc0, acc0
; CHECK-NEXT:    msce32.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 32 x float> @llvm.riscv.mlc.m.nxv32f32(
    <vscale x 32 x float>* %0,
    i64 %1
  )

  %3 = call <vscale x 32 x float> @llvm.riscv.mfsqrt.f.m.nxv32f32(
    <vscale x 32 x float> %2
  )

  call void @llvm.riscv.msc.m.nxv32f32(
    <vscale x 32 x float> %3,
    <vscale x 32 x float>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 16 x double> @llvm.riscv.mlc.m.nxv16f64(
  <vscale x 16 x double>*,
  i64)

declare void @llvm.riscv.msc.m.nxv16f64(
  <vscale x 16 x double>,
  <vscale x 16 x double>*,
  i64)

declare <vscale x 16 x double> @llvm.riscv.mfsqrt.m.nxv16f64(
  <vscale x 16 x double>
)

define void @intrinsic_mfsqrt_m_nxv16f64(<vscale x 16 x double>* %0, i64 %1) {
; CHECK-LABEL: intrinsic_mfsqrt_m_nxv16f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce64.m acc0, (a0), a1
; CHECK-NEXT:    mfsqrt.m acc0, acc0
; CHECK-NEXT:    msce64.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 16 x double> @llvm.riscv.mlc.m.nxv16f64(
    <vscale x 16 x double>* %0,
    i64 %1
  )

  %3 = call <vscale x 16 x double> @llvm.riscv.mfsqrt.m.nxv16f64(
    <vscale x 16 x double> %2
  )

  call void @llvm.riscv.msc.m.nxv16f64(
    <vscale x 16 x double> %3,
    <vscale x 16 x double>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 16 x double> @llvm.riscv.mfsqrt.d.m.nxv16f64(
  <vscale x 16 x double>
)

define void @intrinsic_mfsqrt_d_m_nxv16f64(<vscale x 16 x double>* %0, i64 %1) {
; CHECK-LABEL: intrinsic_mfsqrt_d_m_nxv16f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce64.m acc0, (a0), a1
; CHECK-NEXT:    mfsqrt.d.m acc0, acc0
; CHECK-NEXT:    msce64.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 16 x double> @llvm.riscv.mlc.m.nxv16f64(
    <vscale x 16 x double>* %0,
    i64 %1
  )

  %3 = call <vscale x 16 x double> @llvm.riscv.mfsqrt.d.m.nxv16f64(
    <vscale x 16 x double> %2
  )

  call void @llvm.riscv.msc.m.nxv16f64(
    <vscale x 16 x double> %3,
    <vscale x 16 x double>* %0,
    i64 %1
  )

  ret void
}
