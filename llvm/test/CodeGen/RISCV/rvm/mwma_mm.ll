; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-matrix -mattr=+experimental-v,+d,+experimental-zfh \
; RUN:   -verify-machineinstrs < %s | FileCheck %s

declare <vscale x 128 x i8> @llvm.riscv.mlae.m.nxv8i8(
  <vscale x 128 x i8>*,
  i64, i64)

declare void @llvm.riscv.msae.m.nxv8i8(
  <vscale x 128 x i8>,
  <vscale x 128 x i8>*,
  i64, i64)

declare <vscale x 64 x i16> @llvm.riscv.mlae.m.nxv4i16(
  <vscale x 64 x i16>*,
  i64, i64)

declare void @llvm.riscv.msae.m.nxv4i16(
  <vscale x 64 x i16>,
  <vscale x 64 x i16>*,
  i64, i64)

declare <vscale x 32 x i32> @llvm.riscv.mlae.m.nxv2i32(
  <vscale x 32 x i32>*,
  i64, i64)

declare void @llvm.riscv.msae.m.nxv2i32(
  <vscale x 32 x i32>,
  <vscale x 32 x i32>*,
  i64, i64)

declare <vscale x 16 x i64> @llvm.riscv.mlae.m.nxv1i64(
  <vscale x 16 x i64>*,
  i64, i64)

declare void @llvm.riscv.msae.m.nxv1i64(
  <vscale x 16 x i64>,
  <vscale x 16 x i64>*,
  i64, i64)



declare <vscale x 256 x i8> @llvm.riscv.mlae.m.nxv16i8(
  <vscale x 256 x i8>*,
  i64, i64)

declare void @llvm.riscv.msae.m.nxv16i8(
  <vscale x 256 x i8>,
  <vscale x 256 x i8>*,
  i64, i64)

declare <vscale x 128 x i16> @llvm.riscv.mlae.m.nxv8i16(
  <vscale x 128 x i16>*,
  i64, i64)

declare void @llvm.riscv.msae.m.nxv8i16(
  <vscale x 128 x i16>,
  <vscale x 128 x i16>*,
  i64, i64)

declare <vscale x 64 x i32> @llvm.riscv.mlae.m.nxv4i32(
  <vscale x 64 x i32>*,
  i64, i64)

declare void @llvm.riscv.msae.m.nxv4i32(
  <vscale x 64 x i32>,
  <vscale x 64 x i32>*,
  i64, i64)

declare <vscale x 32 x i64> @llvm.riscv.mlae.m.nxv2i64(
  <vscale x 32 x i64>*,
  i64, i64)

declare void @llvm.riscv.msae.m.nxv2i64(
  <vscale x 32 x i64>,
  <vscale x 32 x i64>*,
  i64, i64)



declare <vscale x 512 x i8> @llvm.riscv.mlae.m.nxv32i8(
  <vscale x 512 x i8>*,
  i64, i64)

declare void @llvm.riscv.msae.m.nxv32i8(
  <vscale x 512 x i8>,
  <vscale x 512 x i8>*,
  i64, i64)

declare <vscale x 256 x i16> @llvm.riscv.mlae.m.nxv16i16(
  <vscale x 256 x i16>*,
  i64, i64)

declare void @llvm.riscv.msae.m.nxv16i16(
  <vscale x 256 x i16>,
  <vscale x 256 x i16>*,
  i64, i64)

declare <vscale x 128 x i32> @llvm.riscv.mlae.m.nxv8i32(
  <vscale x 128 x i32>*,
  i64, i64)

declare void @llvm.riscv.msae.m.nxv8i32(
  <vscale x 128 x i32>,
  <vscale x 128 x i32>*,
  i64, i64)

declare <vscale x 64 x i64> @llvm.riscv.mlae.m.nxv4i64(
  <vscale x 64 x i64>*,
  i64, i64)

declare void @llvm.riscv.msae.m.nxv4i64(
  <vscale x 64 x i64>,
  <vscale x 64 x i64>*,
  i64, i64)


declare <vscale x 128 x i16> @llvm.riscv.mwma.mm.nxv8i16.nxv8i8.nxv8i8.nxv8i16(
  <vscale x 128 x i16>,
  <vscale x 128 x i8>,
  <vscale x 128 x i8>)

declare <vscale x 64 x i32> @llvm.riscv.mwma.mm.nxv4i32.nxv4i16.nxv4i16.nxv4i32(
  <vscale x 64 x i32>,
  <vscale x 64 x i16>,
  <vscale x 64 x i16>)

declare <vscale x 32 x i64> @llvm.riscv.mwma.mm.nxv2i64.nxv2i32.nxv2i32.nxv2i64(
  <vscale x 32 x i64>,
  <vscale x 32 x i32>,
  <vscale x 32 x i32>)


define void @intrinsic_mlae_mwma_mm_msae_i8(<vscale x 128 x i8>* %0, <vscale x 128 x i8>* %1, <vscale x 128 x i16>* %2, i64 %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_mlae_mwma_mm_msae_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae8.m tr0, (a0), a3, m1
; CHECK-NEXT:    mlae8.m tr1, (a1), a3, m1
; CHECK-NEXT:    mlae16.m tr2, (a2), a3, m2
; CHECK-NEXT:    mwma.mm tr2, tr0, tr1
; CHECK-NEXT:    msae16.m tr2, (a2), a3, m2
; CHECK-NEXT:    ret
entry:

  %5 = call <vscale x 128 x i8> @llvm.riscv.mlae.m.nxv8i8(
    <vscale x 128 x i8>* %0,
    i64 %3, i64 0)

  %6 = call <vscale x 128 x i8> @llvm.riscv.mlae.m.nxv8i8(
    <vscale x 128 x i8>* %1,
    i64 %3, i64 0)

  %7 = call <vscale x 128 x i16> @llvm.riscv.mlae.m.nxv8i16(
    <vscale x 128 x i16>* %2,
    i64 %3, i64 1)

  %8 = call <vscale x 128 x i16> @llvm.riscv.mwma.mm.nxv8i16.nxv8i8.nxv8i8.nxv8i16(
    <vscale x 128 x i16> %7,
    <vscale x 128 x i8> %5,
    <vscale x 128 x i8> %6)

  call void @llvm.riscv.msae.m.nxv8i16(
    <vscale x 128 x i16> %8,
    <vscale x 128 x i16>* %2,
    i64 %3, i64 1)

  ret void
}


define void @intrinsic_mlae_mwma_mm_msae_i16(<vscale x 64 x i16>* %0, <vscale x 64 x i16>* %1, <vscale x 64 x i32>* %2, i64 %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_mlae_mwma_mm_msae_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae16.m tr0, (a0), a3, m1
; CHECK-NEXT:    mlae16.m tr1, (a1), a3, m1
; CHECK-NEXT:    mlae32.m tr2, (a2), a3, m2
; CHECK-NEXT:    mwma.mm tr2, tr0, tr1
; CHECK-NEXT:    msae32.m tr2, (a2), a3, m2
; CHECK-NEXT:    ret
entry:

  %5 = call <vscale x 64 x i16> @llvm.riscv.mlae.m.nxv4i16(
    <vscale x 64 x i16>* %0,
    i64 %3, i64 0)

  %6 = call <vscale x 64 x i16> @llvm.riscv.mlae.m.nxv4i16(
    <vscale x 64 x i16>* %1,
    i64 %3, i64 0)

  %7 = call <vscale x 64 x i32> @llvm.riscv.mlae.m.nxv4i32(
    <vscale x 64 x i32>* %2,
    i64 %3, i64 1)

  %8 = call <vscale x 64 x i32> @llvm.riscv.mwma.mm.nxv4i32.nxv4i16.nxv4i16.nxv4i32(
    <vscale x 64 x i32> %7,
    <vscale x 64 x i16> %5,
    <vscale x 64 x i16> %6)

  call void @llvm.riscv.msae.m.nxv4i32(
    <vscale x 64 x i32> %8,
    <vscale x 64 x i32>* %2,
    i64 %3, i64 1)

  ret void
}


define void @intrinsic_mlae_mwma_mm_msae_i32(<vscale x 32 x i32>* %0, <vscale x 32 x i32>* %1, <vscale x 32 x i64>* %2, i64 %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_mlae_mwma_mm_msae_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae32.m tr0, (a0), a3, m1
; CHECK-NEXT:    mlae32.m tr1, (a1), a3, m1
; CHECK-NEXT:    mlae64.m tr2, (a2), a3, m2
; CHECK-NEXT:    mwma.mm tr2, tr0, tr1
; CHECK-NEXT:    msae64.m tr2, (a2), a3, m2
; CHECK-NEXT:    ret
entry:

  %5 = call <vscale x 32 x i32> @llvm.riscv.mlae.m.nxv2i32(
    <vscale x 32 x i32>* %0,
    i64 %3, i64 0)

  %6 = call <vscale x 32 x i32> @llvm.riscv.mlae.m.nxv2i32(
    <vscale x 32 x i32>* %1,
    i64 %3, i64 0)

  %7 = call <vscale x 32 x i64> @llvm.riscv.mlae.m.nxv2i64(
    <vscale x 32 x i64>* %2,
    i64 %3, i64 1)

  %8 = call <vscale x 32 x i64> @llvm.riscv.mwma.mm.nxv2i64.nxv2i32.nxv2i32.nxv2i64(
    <vscale x 32 x i64> %7,
    <vscale x 32 x i32> %5,
    <vscale x 32 x i32> %6)

  call void @llvm.riscv.msae.m.nxv2i64(
    <vscale x 32 x i64> %8,
    <vscale x 32 x i64>* %2,
    i64 %3, i64 1)

  ret void
}

; m2 -> m4
declare <vscale x 256 x i16> @llvm.riscv.mwma.mm.nxv16i16.nxv16i8.nxv16i8.nxv16i16(
  <vscale x 256 x i16>,
  <vscale x 256 x i8>,
  <vscale x 256 x i8>)

define void @intrinsic_mwma_mm_i8m2(<vscale x 256 x i8>* %0, <vscale x 256 x i8>* %1, <vscale x 256 x i16>* %2, i64 %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_mwma_mm_i8m2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae8.m tr0, (a0), a3, m2
; CHECK-NEXT:    mlae8.m tr2, (a1), a3, m2
; CHECK-NEXT:    mlae16.m tr4, (a2), a3, m4
; CHECK-NEXT:    mwma.mm tr4, tr0, tr2
; CHECK-NEXT:    msae16.m tr4, (a2), a3, m4
; CHECK-NEXT:    ret
entry:

  %5 = call <vscale x 256 x i8> @llvm.riscv.mlae.m.nxv16i8(
    <vscale x 256 x i8>* %0,
    i64 %3, i64 1)

  %6 = call <vscale x 256 x i8> @llvm.riscv.mlae.m.nxv16i8(
    <vscale x 256 x i8>* %1,
    i64 %3, i64 1)

  %7 = call <vscale x 256 x i16> @llvm.riscv.mlae.m.nxv16i16(
    <vscale x 256 x i16>* %2,
    i64 %3, i64 2)

  %8 = call <vscale x 256 x i16> @llvm.riscv.mwma.mm.nxv16i16.nxv16i8.nxv16i8.nxv16i16(
    <vscale x 256 x i16> %7,
    <vscale x 256 x i8> %5,
    <vscale x 256 x i8> %6)

  call void @llvm.riscv.msae.m.nxv16i16(
    <vscale x 256 x i16> %8,
    <vscale x 256 x i16>* %2,
    i64 %3, i64 2)

  ret void
}
