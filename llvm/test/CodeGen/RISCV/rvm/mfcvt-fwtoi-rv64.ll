; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-matrix -mattr=+experimental-v,+d,+experimental-zfh \
; RUN:   -verify-machineinstrs < %s | FileCheck %s

declare <vscale x 64 x half> @llvm.riscv.mlc.m.nxv64f16(
  <vscale x 64 x half>*,
  i64)

declare void @llvm.riscv.msc.m.nxv64f16(
  <vscale x 64 x half>,
  <vscale x 64 x half>*,
  i64)

declare <vscale x 32 x float> @llvm.riscv.mlc.m.nxv32f32(
  <vscale x 32 x float>*,
  i64)

declare void @llvm.riscv.msc.m.nxv32f32(
  <vscale x 32 x float>,
  <vscale x 32 x float>*,
  i64)

declare <vscale x 16 x double> @llvm.riscv.mlc.m.nxv16f64(
  <vscale x 16 x double>*,
  i64)

declare void @llvm.riscv.msc.m.nxv16f64(
  <vscale x 16 x double>,
  <vscale x 16 x double>*,
  i64)

declare <vscale x 128 x i8> @llvm.riscv.mlc.m.nxv128i8(
  <vscale x 128 x i8>*,
  i64)

declare void @llvm.riscv.msc.m.nxv128i8(
  <vscale x 128 x i8>,
  <vscale x 128 x i8>*,
  i64)

declare <vscale x 64 x i16> @llvm.riscv.mlc.m.nxv64i16(
  <vscale x 64 x i16>*,
  i64)

declare void @llvm.riscv.msc.m.nxv64i16(
  <vscale x 64 x i16>,
  <vscale x 64 x i16>*,
  i64)

declare <vscale x 32 x i32> @llvm.riscv.mlc.m.nxv32i32(
  <vscale x 32 x i32>*,
  i64)

declare void @llvm.riscv.msc.m.nxv32i32(
  <vscale x 32 x i32>,
  <vscale x 32 x i32>*,
  i64)

declare <vscale x 16 x i64> @llvm.riscv.mlc.m.nxv16i64(
  <vscale x 16 x i64>*,
  i64)

declare void @llvm.riscv.msc.m.nxv16i64(
  <vscale x 16 x i64>,
  <vscale x 16 x i64>*,
  i64)

declare <vscale x 128 x i8> @llvm.riscv.mfncvtu.x.fw.m.nxv128i8(
  <vscale x 64 x half>)

declare <vscale x 64 x i16> @llvm.riscv.mfncvtu.x.fw.m.nxv64i16(
  <vscale x 32 x float>)

declare <vscale x 32 x i32> @llvm.riscv.mfncvtu.x.fw.m.nxv32i32(
  <vscale x 16 x double>)

declare <vscale x 128 x i8> @llvm.riscv.mfncvtu.b.hf.m.nxv128i8(
  <vscale x 64 x half>)

declare <vscale x 64 x i16> @llvm.riscv.mfncvtu.h.f.m.nxv64i16(
  <vscale x 32 x float>)

declare <vscale x 32 x i32> @llvm.riscv.mfncvtu.w.d.m.nxv32i32(
  <vscale x 16 x double>)

declare <vscale x 128 x i8> @llvm.riscv.mfncvtu.x.fq.m.nxv128i8(
  <vscale x 32 x float>)

declare <vscale x 128 x i8> @llvm.riscv.mfncvtu.b.f.m.nxv128i8(
  <vscale x 32 x float>)

define void @intrinsic_mfncvtu(<vscale x 128 x i8>* %0, <vscale x 64 x i16>* %1, <vscale x 64 x half>* %2, <vscale x 32 x i32>* %3, <vscale x 32 x float>* %4, <vscale x 16 x i64>* %5, <vscale x 16 x double>* %6, i64 %7) {
; CHECK-LABEL: intrinsic_mfncvtu:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce16.m acc0, (a2), a7
; CHECK-NEXT:    mfncvtu.x.fw.m acc1, acc0
; CHECK-NEXT:    msce8.m acc1, (a0), a7
; CHECK-NEXT:    mfncvtu.b.hf.m acc0, acc0
; CHECK-NEXT:    msce8.m acc0, (a0), a7
; CHECK-NEXT:    mlce32.m acc0, (a4), a7
; CHECK-NEXT:    mfncvtu.x.fw.m acc1, acc0
; CHECK-NEXT:    msce16.m acc1, (a1), a7
; CHECK-NEXT:    mfncvtu.h.f.m acc1, acc0
; CHECK-NEXT:    msce16.m acc1, (a1), a7
; CHECK-NEXT:    mlce64.m acc1, (a6), a7
; CHECK-NEXT:    mfncvtu.x.fw.m acc2, acc1
; CHECK-NEXT:    msce32.m acc2, (a3), a7
; CHECK-NEXT:    mfncvtu.w.d.m acc1, acc1
; CHECK-NEXT:    msce32.m acc1, (a3), a7
; CHECK-NEXT:    mfncvtu.x.fq.m acc1, acc0
; CHECK-NEXT:    msce8.m acc1, (a0), a7
; CHECK-NEXT:    mfncvtu.b.f.m acc0, acc0
; CHECK-NEXT:    msce8.m acc0, (a0), a7
; CHECK-NEXT:    ret
entry:
  %8 = call <vscale x 64 x half> @llvm.riscv.mlc.m.nxv64f16(
    <vscale x 64 x half>* %2,
    i64 %7
  )

  %9 = call <vscale x 128 x i8> @llvm.riscv.mfncvtu.x.fw.m.nxv128i8(
    <vscale x 64 x half> %8
  )

  call void @llvm.riscv.msc.m.nxv128i8(
    <vscale x 128 x i8> %9,
    <vscale x 128 x i8>* %0,
    i64 %7
  )

  %10 = call <vscale x 128 x i8> @llvm.riscv.mfncvtu.b.hf.m.nxv128i8(
    <vscale x 64 x half> %8
  )

  call void @llvm.riscv.msc.m.nxv128i8(
    <vscale x 128 x i8> %10,
    <vscale x 128 x i8>* %0,
    i64 %7
  )

  %11 = call <vscale x 32 x float> @llvm.riscv.mlc.m.nxv32f32(
    <vscale x 32 x float>* %4,
    i64 %7
  )

  %12 = call <vscale x 64 x i16> @llvm.riscv.mfncvtu.x.fw.m.nxv64i16(
    <vscale x 32 x float> %11
  )

  call void @llvm.riscv.msc.m.nxv64i16(
    <vscale x 64 x i16> %12,
    <vscale x 64 x i16>* %1,
    i64 %7
  )

  %13 = call <vscale x 64 x i16> @llvm.riscv.mfncvtu.h.f.m.nxv64i16(
    <vscale x 32 x float> %11
  )

  call void @llvm.riscv.msc.m.nxv64i16(
    <vscale x 64 x i16> %13,
    <vscale x 64 x i16>* %1,
    i64 %7
  )

  %14 = call <vscale x 16 x double> @llvm.riscv.mlc.m.nxv16f64(
    <vscale x 16 x double>* %6,
    i64 %7
  )

  %15 = call <vscale x 32 x i32> @llvm.riscv.mfncvtu.x.fw.m.nxv32i32(
    <vscale x 16 x double> %14
  )

  call void @llvm.riscv.msc.m.nxv32i32(
    <vscale x 32 x i32> %15,
    <vscale x 32 x i32>* %3,
    i64 %7
  )

  %16 = call <vscale x 32 x i32> @llvm.riscv.mfncvtu.w.d.m.nxv32i32(
    <vscale x 16 x double> %14
  )

  call void @llvm.riscv.msc.m.nxv32i32(
    <vscale x 32 x i32> %16,
    <vscale x 32 x i32>* %3,
    i64 %7
  )

  %17 = call <vscale x 128 x i8> @llvm.riscv.mfncvtu.x.fq.m.nxv128i8(
    <vscale x 32 x float> %11
  )

  call void @llvm.riscv.msc.m.nxv128i8(
    <vscale x 128 x i8> %17,
    <vscale x 128 x i8>* %0,
    i64 %7
  )

  %18 = call <vscale x 128 x i8> @llvm.riscv.mfncvtu.b.f.m.nxv128i8(
    <vscale x 32 x float> %11
  )

  call void @llvm.riscv.msc.m.nxv128i8(
    <vscale x 128 x i8> %18,
    <vscale x 128 x i8>* %0,
    i64 %7
  )

  ret void
}

declare <vscale x 128 x i8> @llvm.riscv.mfncvt.x.fw.m.nxv128i8(
  <vscale x 64 x half>)

declare <vscale x 64 x i16> @llvm.riscv.mfncvt.x.fw.m.nxv64i16(
  <vscale x 32 x float>)

declare <vscale x 32 x i32> @llvm.riscv.mfncvt.x.fw.m.nxv32i32(
  <vscale x 16 x double>)

declare <vscale x 128 x i8> @llvm.riscv.mfncvt.b.hf.m.nxv128i8(
  <vscale x 64 x half>)

declare <vscale x 64 x i16> @llvm.riscv.mfncvt.h.f.m.nxv64i16(
  <vscale x 32 x float>)

declare <vscale x 32 x i32> @llvm.riscv.mfncvt.w.d.m.nxv32i32(
  <vscale x 16 x double>)

declare <vscale x 128 x i8> @llvm.riscv.mfncvt.x.fq.m.nxv128i8(
  <vscale x 32 x float>)

declare <vscale x 128 x i8> @llvm.riscv.mfncvt.b.f.m.nxv128i8(
  <vscale x 32 x float>)

define void @intrinsic_mfncvt(<vscale x 128 x i8>* %0, <vscale x 64 x i16>* %1, <vscale x 64 x half>* %2, <vscale x 32 x i32>* %3, <vscale x 32 x float>* %4, <vscale x 16 x i64>* %5, <vscale x 16 x double>* %6, i64 %7) {
; CHECK-LABEL: intrinsic_mfncvt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce16.m acc0, (a2), a7
; CHECK-NEXT:    mfncvt.x.fw.m acc1, acc0
; CHECK-NEXT:    msce8.m acc1, (a0), a7
; CHECK-NEXT:    mfncvt.b.hf.m acc0, acc0
; CHECK-NEXT:    msce8.m acc0, (a0), a7
; CHECK-NEXT:    mlce32.m acc0, (a4), a7
; CHECK-NEXT:    mfncvt.x.fw.m acc1, acc0
; CHECK-NEXT:    msce16.m acc1, (a1), a7
; CHECK-NEXT:    mfncvt.h.f.m acc1, acc0
; CHECK-NEXT:    msce16.m acc1, (a1), a7
; CHECK-NEXT:    mlce64.m acc1, (a6), a7
; CHECK-NEXT:    mfncvt.x.fw.m acc2, acc1
; CHECK-NEXT:    msce32.m acc2, (a3), a7
; CHECK-NEXT:    mfncvt.w.d.m acc1, acc1
; CHECK-NEXT:    msce32.m acc1, (a3), a7
; CHECK-NEXT:    mfncvt.x.fq.m acc1, acc0
; CHECK-NEXT:    msce8.m acc1, (a0), a7
; CHECK-NEXT:    mfncvt.b.f.m acc0, acc0
; CHECK-NEXT:    msce8.m acc0, (a0), a7
; CHECK-NEXT:    ret
entry:
  %8 = call <vscale x 64 x half> @llvm.riscv.mlc.m.nxv64f16(
    <vscale x 64 x half>* %2,
    i64 %7
  )

  %9 = call <vscale x 128 x i8> @llvm.riscv.mfncvt.x.fw.m.nxv128i8(
    <vscale x 64 x half> %8
  )

  call void @llvm.riscv.msc.m.nxv128i8(
    <vscale x 128 x i8> %9,
    <vscale x 128 x i8>* %0,
    i64 %7
  )

  %10 = call <vscale x 128 x i8> @llvm.riscv.mfncvt.b.hf.m.nxv128i8(
    <vscale x 64 x half> %8
  )

  call void @llvm.riscv.msc.m.nxv128i8(
    <vscale x 128 x i8> %10,
    <vscale x 128 x i8>* %0,
    i64 %7
  )

  %11 = call <vscale x 32 x float> @llvm.riscv.mlc.m.nxv32f32(
    <vscale x 32 x float>* %4,
    i64 %7
  )

  %12 = call <vscale x 64 x i16> @llvm.riscv.mfncvt.x.fw.m.nxv64i16(
    <vscale x 32 x float> %11
  )

  call void @llvm.riscv.msc.m.nxv64i16(
    <vscale x 64 x i16> %12,
    <vscale x 64 x i16>* %1,
    i64 %7
  )

  %13 = call <vscale x 64 x i16> @llvm.riscv.mfncvt.h.f.m.nxv64i16(
    <vscale x 32 x float> %11
  )

  call void @llvm.riscv.msc.m.nxv64i16(
    <vscale x 64 x i16> %13,
    <vscale x 64 x i16>* %1,
    i64 %7
  )

  %14 = call <vscale x 16 x double> @llvm.riscv.mlc.m.nxv16f64(
    <vscale x 16 x double>* %6,
    i64 %7
  )

  %15 = call <vscale x 32 x i32> @llvm.riscv.mfncvt.x.fw.m.nxv32i32(
    <vscale x 16 x double> %14
  )

  call void @llvm.riscv.msc.m.nxv32i32(
    <vscale x 32 x i32> %15,
    <vscale x 32 x i32>* %3,
    i64 %7
  )

  %16 = call <vscale x 32 x i32> @llvm.riscv.mfncvt.w.d.m.nxv32i32(
    <vscale x 16 x double> %14
  )

  call void @llvm.riscv.msc.m.nxv32i32(
    <vscale x 32 x i32> %16,
    <vscale x 32 x i32>* %3,
    i64 %7
  )

  %17 = call <vscale x 128 x i8> @llvm.riscv.mfncvt.x.fq.m.nxv128i8(
    <vscale x 32 x float> %11
  )

  call void @llvm.riscv.msc.m.nxv128i8(
    <vscale x 128 x i8> %17,
    <vscale x 128 x i8>* %0,
    i64 %7
  )

  %18 = call <vscale x 128 x i8> @llvm.riscv.mfncvt.b.f.m.nxv128i8(
    <vscale x 32 x float> %11
  )

  call void @llvm.riscv.msc.m.nxv128i8(
    <vscale x 128 x i8> %18,
    <vscale x 128 x i8>* %0,
    i64 %7
  )

  ret void
}
