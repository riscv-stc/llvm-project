; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-matrix -mattr=+experimental-v,+d,+experimental-zfh -target-abi lp64d \
; RUN:   -verify-machineinstrs < %s | FileCheck %s

declare <vscale x 32 x float> @llvm.riscv.mlae.m.nxv2f32(
  <vscale x 32 x float>*,
  i64, i64)

declare float @llvm.riscv.mfmv.f.s.nxv2f32(
  <vscale x 32 x float>,
  i64
)

define float @intrinsic_mfmv_nxv2f32(<vscale x 32 x float>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mfmv_nxv2f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae32.m tr0, (a0), a1, m1
; CHECK-NEXT:    mfmv.f.s fa0, tr0, a1
; CHECK-NEXT:    ret
entry:

  %2 = call <vscale x 32 x float> @llvm.riscv.mlae.m.nxv2f32(
    <vscale x 32 x float>* %0,
    i64 %1, i64 0)

  %3 = call float @llvm.riscv.mfmv.f.s.nxv2f32(<vscale x 32 x float> %2, i64 %1)

  ret float %3
}


declare <vscale x 64 x half> @llvm.riscv.mlae.m.nxv4f16(
  <vscale x 64 x half>*,
  i64, i64)

declare half @llvm.riscv.mfmv.f.s.nxv4f16(
  <vscale x 64 x half>,
  i64
)

define half @intrinsic_mfmv_nxv4f16(<vscale x 64 x half>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mfmv_nxv4f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae16.m tr0, (a0), a1, m1
; CHECK-NEXT:    mfmv.f.s fa0, tr0, a1
; CHECK-NEXT:    ret
entry:

  %2 = call <vscale x 64 x half> @llvm.riscv.mlae.m.nxv4f16(
    <vscale x 64 x half>* %0,
    i64 %1, i64 0)

  %3 = call half @llvm.riscv.mfmv.f.s.nxv4f16(<vscale x 64 x half> %2, i64 %1)

  ret half %3
}

declare <vscale x 16 x double> @llvm.riscv.mlae.m.nxv1f64(
  <vscale x 16 x double>*,
  i64, i64)

declare double @llvm.riscv.mfmv.f.s.nxv1f64(
  <vscale x 16 x double>,
  i64
)

define double @intrinsic_mfmv_nxv1f64(<vscale x 16 x double>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mfmv_nxv1f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae64.m tr0, (a0), a1, m1
; CHECK-NEXT:    mfmv.f.s fa0, tr0, a1
; CHECK-NEXT:    ret
entry:

  %2 = call <vscale x 16 x double> @llvm.riscv.mlae.m.nxv1f64(
    <vscale x 16 x double>* %0,
    i64 %1, i64 0)

  %3 = call double @llvm.riscv.mfmv.f.s.nxv1f64(<vscale x 16 x double> %2, i64 %1)

  ret double %3
}
