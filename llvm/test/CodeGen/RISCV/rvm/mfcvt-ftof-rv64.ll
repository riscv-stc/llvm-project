; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-matrix -mattr=+experimental-v,+d,+experimental-zfh \
; RUN:   -verify-machineinstrs < %s | FileCheck %s

declare <vscale x 64 x half> @llvm.riscv.mlc.m.nxv64f16(
  <vscale x 64 x half>*,
  i64)

declare void @llvm.riscv.msc.m.nxv64f16(
  <vscale x 64 x half>,
  <vscale x 64 x half>*,
  i64)

declare <vscale x 32 x float> @llvm.riscv.mlc.m.nxv32f32(
  <vscale x 32 x float>*,
  i64)

declare void @llvm.riscv.msc.m.nxv32f32(
  <vscale x 32 x float>,
  <vscale x 32 x float>*,
  i64)

declare <vscale x 16 x double> @llvm.riscv.mlc.m.nxv16f64(
  <vscale x 16 x double>*,
  i64)

declare void @llvm.riscv.msc.m.nxv16f64(
  <vscale x 16 x double>,
  <vscale x 16 x double>*,
  i64)

declare <vscale x 32 x float> @llvm.riscv.mfwcvt.fw.f.m.nxv32f32(
  <vscale x 64 x half>
)

declare <vscale x 16 x double> @llvm.riscv.mfwcvt.fw.f.m.nxv16f64(
  <vscale x 32 x float>
)

declare <vscale x 32 x float> @llvm.riscv.mfwcvt.f.hf.m.nxv32f32(
  <vscale x 64 x half>
)

declare <vscale x 16 x double> @llvm.riscv.mfwcvt.d.f.m.nxv16f64(
  <vscale x 32 x float>
)

define void @intrinsic_mfwcvt(<vscale x 64 x half>* %0, <vscale x 32 x float>* %1, <vscale x 16 x double>* %2, i64 %3) nounwind{
; CHECK-LABEL: intrinsic_mfwcvt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce16.m acc0, (a0), a3
; CHECK-NEXT:    mfwcvt.fw.f.m acc1, acc0
; CHECK-NEXT:    mfwcvt.f.hf.m acc0, acc0
; CHECK-NEXT:    mfwcvt.fw.f.m acc1, acc1
; CHECK-NEXT:    mfwcvt.d.f.m acc0, acc0
; CHECK-NEXT:    msce64.m acc1, (a2), a3
; CHECK-NEXT:    msce64.m acc0, (a2), a3
; CHECK-NEXT:    ret
entry:
  %4 = call <vscale x 64 x half> @llvm.riscv.mlc.m.nxv64f16(
    <vscale x 64 x half>* %0,
    i64 %3
  )

  %5 = call <vscale x 32 x float> @llvm.riscv.mfwcvt.fw.f.m.nxv32f32(
    <vscale x 64 x half> %4
  )

  %6 = call <vscale x 32 x float> @llvm.riscv.mfwcvt.f.hf.m.nxv32f32(
    <vscale x 64 x half> %4
  )

  %7 = call <vscale x 16 x double> @llvm.riscv.mfwcvt.fw.f.m.nxv16f64(
    <vscale x 32 x float> %5
  )

  %8 = call <vscale x 16 x double> @llvm.riscv.mfwcvt.d.f.m.nxv16f64(
    <vscale x 32 x float> %6
  )

  call void @llvm.riscv.msc.m.nxv16f64(
    <vscale x 16 x double> %7,
    <vscale x 16 x double>* %2,
    i64 %3
  )

  call void @llvm.riscv.msc.m.nxv16f64(
    <vscale x 16 x double> %8,
    <vscale x 16 x double>* %2,
    i64 %3
  )

  ret void
}

declare <vscale x 64 x half> @llvm.riscv.mfncvt.f.fw.m.nxv64f16(
  <vscale x 32 x float>
)

declare <vscale x 64 x half> @llvm.riscv.mfncvt.hf.f.m.nxv64f16(
  <vscale x 32 x float>
)

declare <vscale x 32 x float> @llvm.riscv.mfncvt.f.fw.m.nxv32f32(
  <vscale x 16 x double>
)

declare <vscale x 32 x float> @llvm.riscv.mfncvt.f.d.m.nxv32f32(
  <vscale x 16 x double>
)

define void @intrinsic_mfncvt(<vscale x 64 x half>* %0, <vscale x 32 x float>* %1, <vscale x 16 x double>* %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_mfncvt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce64.m acc0, (a2), a3
; CHECK-NEXT:    mfncvt.f.fw.m acc1, acc0
; CHECK-NEXT:    mfncvt.f.d.m acc0, acc0
; CHECK-NEXT:    mfncvt.f.fw.m acc1, acc1
; CHECK-NEXT:    mfncvt.hf.f.m acc0, acc0
; CHECK-NEXT:    msce16.m acc1, (a0), a3
; CHECK-NEXT:    msce16.m acc0, (a0), a3
; CHECK-NEXT:    ret
entry:
  %4 = call <vscale x 16 x double> @llvm.riscv.mlc.m.nxv16f64(
    <vscale x 16 x double>* %2,
    i64 %3
  )

  %5 = call <vscale x 32 x float> @llvm.riscv.mfncvt.f.fw.m.nxv32f32(
    <vscale x 16 x double> %4
  )

  %6 = call <vscale x 32 x float> @llvm.riscv.mfncvt.f.d.m.nxv32f32(
    <vscale x 16 x double> %4
  )

  %7 = call <vscale x 64 x half> @llvm.riscv.mfncvt.f.fw.m.nxv64f16(
    <vscale x 32 x float> %5
  )

  %8 = call <vscale x 64 x half> @llvm.riscv.mfncvt.hf.f.m.nxv64f16(
    <vscale x 32 x float> %6
  )

  call void @llvm.riscv.msc.m.nxv64f16(
    <vscale x 64 x half> %7,
    <vscale x 64 x half>* %0,
    i64 %3
  )

  call void @llvm.riscv.msc.m.nxv64f16(
    <vscale x 64 x half> %8,
    <vscale x 64 x half>* %0,
    i64 %3
  )

  ret void
}
