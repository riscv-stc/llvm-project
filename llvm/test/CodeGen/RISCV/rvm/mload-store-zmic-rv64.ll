; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-matrix -mattr=+experimental-v,+d,+experimental-zfh \
; RUN:   -verify-machineinstrs < %s | FileCheck %s

declare <vscale x 128 x i8> @llvm.riscv.mlufa.m.nxv128i8(
  <vscale x 128 x i8>*,
  i64
)

declare void @llvm.riscv.msfda.m.nxv128i8(
  <vscale x 128 x i8>,
  <vscale x 128 x i8>*,
  i64
)

declare <vscale x 64 x i16> @llvm.riscv.mlufa.m.nxv64i16(
  <vscale x 64 x i16>*,
  i64
)

declare void @llvm.riscv.msfda.m.nxv64i16(
  <vscale x 64 x i16>,
  <vscale x 64 x i16>*,
  i64
)

declare <vscale x 64 x half> @llvm.riscv.mlufa.m.nxv64f16(
  <vscale x 64 x half>*,
  i64
)

declare void @llvm.riscv.msfda.m.nxv64f16(
  <vscale x 64 x half>,
  <vscale x 64 x half>*,
  i64
)

declare <vscale x 32 x i32> @llvm.riscv.mlufa.m.nxv32i32(
  <vscale x 32 x i32>*,
  i64
)

declare void @llvm.riscv.msfda.m.nxv32i32(
  <vscale x 32 x i32>,
  <vscale x 32 x i32>*,
  i64
)

declare <vscale x 32 x float> @llvm.riscv.mlufa.m.nxv32f32(
  <vscale x 32 x float>*,
  i64
)

declare void @llvm.riscv.msfda.m.nxv32f32(
  <vscale x 32 x float>,
  <vscale x 32 x float>*,
  i64
)

declare <vscale x 16 x i64> @llvm.riscv.mlufa.m.nxv16i64(
  <vscale x 16 x i64>*,
  i64
)

declare void @llvm.riscv.msfda.m.nxv16i64(
  <vscale x 16 x i64>,
  <vscale x 16 x i64>*,
  i64
)

declare <vscale x 16 x double> @llvm.riscv.mlufa.m.nxv16f64(
  <vscale x 16 x double>*,
  i64
)

declare void @llvm.riscv.msfda.m.nxv16f64(
  <vscale x 16 x double>,
  <vscale x 16 x double>*,
  i64
)

define void @intrinsic_mlufa_msfda(<vscale x 128 x i8>* %0, <vscale x 64 x i16>* %1, <vscale x 64 x half>* %2, <vscale x 32 x i32>* %3, <vscale x 32 x float>* %4, <vscale x 16 x i64>* %5, <vscale x 16 x double>* %6, i64 %7) nounwind {
; CHECK-LABEL: intrinsic_mlufa_msfda:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlufae8.m tr0, (a0), a7
; CHECK-NEXT:    msfdae8.m tr0, (a0), a7
; CHECK-NEXT:    mlufae16.m tr0, (a1), a7
; CHECK-NEXT:    msfdae16.m tr0, (a1), a7
; CHECK-NEXT:    mlufae16.m tr0, (a2), a7
; CHECK-NEXT:    msfdae16.m tr0, (a2), a7
; CHECK-NEXT:    mlufae32.m tr0, (a3), a7
; CHECK-NEXT:    msfdae32.m tr0, (a3), a7
; CHECK-NEXT:    mlufae32.m tr0, (a4), a7
; CHECK-NEXT:    msfdae32.m tr0, (a4), a7
; CHECK-NEXT:    mlufae64.m tr0, (a5), a7
; CHECK-NEXT:    msfdae64.m tr0, (a5), a7
; CHECK-NEXT:    mlufae64.m tr0, (a6), a7
; CHECK-NEXT:    msfdae64.m tr0, (a6), a7
; CHECK-NEXT:    ret
entry:
  %8 = call <vscale x 128 x i8> @llvm.riscv.mlufa.m.nxv128i8(
    <vscale x 128 x i8>* %0,
    i64 %7
  )

  call void @llvm.riscv.msfda.m.nxv128i8(
    <vscale x 128 x i8> %8,
    <vscale x 128 x i8>* %0,
    i64 %7
  )

  %9 = call <vscale x 64 x i16> @llvm.riscv.mlufa.m.nxv64i16(
    <vscale x 64 x i16>* %1,
    i64 %7
  )

  call void @llvm.riscv.msfda.m.nxv64i16(
    <vscale x 64 x i16> %9,
    <vscale x 64 x i16>* %1,
    i64 %7
  )

  %10 = call <vscale x 64 x half> @llvm.riscv.mlufa.m.nxv64f16(
    <vscale x 64 x half>* %2,
    i64 %7
  )

  call void @llvm.riscv.msfda.m.nxv64f16(
    <vscale x 64 x half> %10,
    <vscale x 64 x half>* %2,
    i64 %7
  )

  %11 = call <vscale x 32 x i32> @llvm.riscv.mlufa.m.nxv32i32(
    <vscale x 32 x i32>* %3,
    i64 %7
  )

  call void @llvm.riscv.msfda.m.nxv32i32(
    <vscale x 32 x i32> %11,
    <vscale x 32 x i32>* %3,
    i64 %7
  )

  %12 = call <vscale x 32 x float> @llvm.riscv.mlufa.m.nxv32f32(
    <vscale x 32 x float>* %4,
    i64 %7
  )

  call void @llvm.riscv.msfda.m.nxv32f32(
    <vscale x 32 x float> %12,
    <vscale x 32 x float>* %4,
    i64 %7
  )

  %13 = call <vscale x 16 x i64> @llvm.riscv.mlufa.m.nxv16i64(
    <vscale x 16 x i64>* %5,
    i64 %7
  )

  call void @llvm.riscv.msfda.m.nxv16i64(
    <vscale x 16 x i64> %13,
    <vscale x 16 x i64>* %5,
    i64 %7
  )

  %14 = call <vscale x 16 x double> @llvm.riscv.mlufa.m.nxv16f64(
    <vscale x 16 x double>* %6,
    i64 %7
  )

  call void @llvm.riscv.msfda.m.nxv16f64(
    <vscale x 16 x double> %14,
    <vscale x 16 x double>* %6,
    i64 %7
  )
  ret void
}

declare <vscale x 128 x i8> @llvm.riscv.mlufb.m.nxv128i8(
  <vscale x 128 x i8>*,
  i64
)

declare void @llvm.riscv.msfdb.m.nxv128i8(
  <vscale x 128 x i8>,
  <vscale x 128 x i8>*,
  i64
)

declare <vscale x 64 x i16> @llvm.riscv.mlufb.m.nxv64i16(
  <vscale x 64 x i16>*,
  i64
)

declare void @llvm.riscv.msfdb.m.nxv64i16(
  <vscale x 64 x i16>,
  <vscale x 64 x i16>*,
  i64
)

declare <vscale x 64 x half> @llvm.riscv.mlufb.m.nxv64f16(
  <vscale x 64 x half>*,
  i64
)

declare void @llvm.riscv.msfdb.m.nxv64f16(
  <vscale x 64 x half>,
  <vscale x 64 x half>*,
  i64
)

declare <vscale x 32 x i32> @llvm.riscv.mlufb.m.nxv32i32(
  <vscale x 32 x i32>*,
  i64
)

declare void @llvm.riscv.msfdb.m.nxv32i32(
  <vscale x 32 x i32>,
  <vscale x 32 x i32>*,
  i64
)

declare <vscale x 32 x float> @llvm.riscv.mlufb.m.nxv32f32(
  <vscale x 32 x float>*,
  i64
)

declare void @llvm.riscv.msfdb.m.nxv32f32(
  <vscale x 32 x float>,
  <vscale x 32 x float>*,
  i64
)

declare <vscale x 16 x i64> @llvm.riscv.mlufb.m.nxv16i64(
  <vscale x 16 x i64>*,
  i64
)

declare void @llvm.riscv.msfdb.m.nxv16i64(
  <vscale x 16 x i64>,
  <vscale x 16 x i64>*,
  i64
)

declare <vscale x 16 x double> @llvm.riscv.mlufb.m.nxv16f64(
  <vscale x 16 x double>*,
  i64
)

declare void @llvm.riscv.msfdb.m.nxv16f64(
  <vscale x 16 x double>,
  <vscale x 16 x double>*,
  i64
)

define void @intrinsic_mlufb_msfdb(<vscale x 128 x i8>* %0, <vscale x 64 x i16>* %1, <vscale x 64 x half>* %2, <vscale x 32 x i32>* %3, <vscale x 32 x float>* %4, <vscale x 16 x i64>* %5, <vscale x 16 x double>* %6, i64 %7) nounwind {
; CHECK-LABEL: intrinsic_mlufb_msfdb:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlufbe8.m tr0, (a0), a7
; CHECK-NEXT:    msfdbe8.m tr0, (a0), a7
; CHECK-NEXT:    mlufbe16.m tr0, (a1), a7
; CHECK-NEXT:    msfdbe16.m tr0, (a1), a7
; CHECK-NEXT:    mlufbe16.m tr0, (a2), a7
; CHECK-NEXT:    msfdbe16.m tr0, (a2), a7
; CHECK-NEXT:    mlufbe32.m tr0, (a3), a7
; CHECK-NEXT:    msfdbe32.m tr0, (a3), a7
; CHECK-NEXT:    mlufbe32.m tr0, (a4), a7
; CHECK-NEXT:    msfdbe32.m tr0, (a4), a7
; CHECK-NEXT:    mlufbe64.m tr0, (a5), a7
; CHECK-NEXT:    msfdbe64.m tr0, (a5), a7
; CHECK-NEXT:    mlufbe64.m tr0, (a6), a7
; CHECK-NEXT:    msfdbe64.m tr0, (a6), a7
; CHECK-NEXT:    ret
entry:
  %8 = call <vscale x 128 x i8> @llvm.riscv.mlufb.m.nxv128i8(
    <vscale x 128 x i8>* %0,
    i64 %7
  )

  call void @llvm.riscv.msfdb.m.nxv128i8(
    <vscale x 128 x i8> %8,
    <vscale x 128 x i8>* %0,
    i64 %7
  )

  %9 = call <vscale x 64 x i16> @llvm.riscv.mlufb.m.nxv64i16(
    <vscale x 64 x i16>* %1,
    i64 %7
  )

  call void @llvm.riscv.msfdb.m.nxv64i16(
    <vscale x 64 x i16> %9,
    <vscale x 64 x i16>* %1,
    i64 %7
  )

  %10 = call <vscale x 64 x half> @llvm.riscv.mlufb.m.nxv64f16(
    <vscale x 64 x half>* %2,
    i64 %7
  )

  call void @llvm.riscv.msfdb.m.nxv64f16(
    <vscale x 64 x half> %10,
    <vscale x 64 x half>* %2,
    i64 %7
  )

  %11 = call <vscale x 32 x i32> @llvm.riscv.mlufb.m.nxv32i32(
    <vscale x 32 x i32>* %3,
    i64 %7
  )

  call void @llvm.riscv.msfdb.m.nxv32i32(
    <vscale x 32 x i32> %11,
    <vscale x 32 x i32>* %3,
    i64 %7
  )

  %12 = call <vscale x 32 x float> @llvm.riscv.mlufb.m.nxv32f32(
    <vscale x 32 x float>* %4,
    i64 %7
  )

  call void @llvm.riscv.msfdb.m.nxv32f32(
    <vscale x 32 x float> %12,
    <vscale x 32 x float>* %4,
    i64 %7
  )

  %13 = call <vscale x 16 x i64> @llvm.riscv.mlufb.m.nxv16i64(
    <vscale x 16 x i64>* %5,
    i64 %7
  )

  call void @llvm.riscv.msfdb.m.nxv16i64(
    <vscale x 16 x i64> %13,
    <vscale x 16 x i64>* %5,
    i64 %7
  )

  %14 = call <vscale x 16 x double> @llvm.riscv.mlufb.m.nxv16f64(
    <vscale x 16 x double>* %6,
    i64 %7
  )

  call void @llvm.riscv.msfdb.m.nxv16f64(
    <vscale x 16 x double> %14,
    <vscale x 16 x double>* %6,
    i64 %7
  )
  ret void
}

declare <vscale x 128 x i8> @llvm.riscv.mlufc.m.nxv128i8(
  <vscale x 128 x i8>*,
  i64
)

declare void @llvm.riscv.msfdc.m.nxv128i8(
  <vscale x 128 x i8>,
  <vscale x 128 x i8>*,
  i64
)

declare <vscale x 64 x i16> @llvm.riscv.mlufc.m.nxv64i16(
  <vscale x 64 x i16>*,
  i64
)

declare void @llvm.riscv.msfdc.m.nxv64i16(
  <vscale x 64 x i16>,
  <vscale x 64 x i16>*,
  i64
)

declare <vscale x 64 x half> @llvm.riscv.mlufc.m.nxv64f16(
  <vscale x 64 x half>*,
  i64
)

declare void @llvm.riscv.msfdc.m.nxv64f16(
  <vscale x 64 x half>,
  <vscale x 64 x half>*,
  i64
)

declare <vscale x 32 x i32> @llvm.riscv.mlufc.m.nxv32i32(
  <vscale x 32 x i32>*,
  i64
)

declare void @llvm.riscv.msfdc.m.nxv32i32(
  <vscale x 32 x i32>,
  <vscale x 32 x i32>*,
  i64
)

declare <vscale x 32 x float> @llvm.riscv.mlufc.m.nxv32f32(
  <vscale x 32 x float>*,
  i64
)

declare void @llvm.riscv.msfdc.m.nxv32f32(
  <vscale x 32 x float>,
  <vscale x 32 x float>*,
  i64
)

declare <vscale x 16 x i64> @llvm.riscv.mlufc.m.nxv16i64(
  <vscale x 16 x i64>*,
  i64
)

declare void @llvm.riscv.msfdc.m.nxv16i64(
  <vscale x 16 x i64>,
  <vscale x 16 x i64>*,
  i64
)

declare <vscale x 16 x double> @llvm.riscv.mlufc.m.nxv16f64(
  <vscale x 16 x double>*,
  i64
)

declare void @llvm.riscv.msfdc.m.nxv16f64(
  <vscale x 16 x double>,
  <vscale x 16 x double>*,
  i64
)

define void @intrinsic_mlufc_msfdc(<vscale x 128 x i8>* %0, <vscale x 64 x i16>* %1, <vscale x 64 x half>* %2, <vscale x 32 x i32>* %3, <vscale x 32 x float>* %4, <vscale x 16 x i64>* %5, <vscale x 16 x double>* %6, i64 %7) nounwind {
; CHECK-LABEL: intrinsic_mlufc_msfdc:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlufce8.m acc0, (a0), a7
; CHECK-NEXT:    msfdce8.m acc0, (a0), a7
; CHECK-NEXT:    mlufce16.m acc0, (a1), a7
; CHECK-NEXT:    msfdce16.m acc0, (a1), a7
; CHECK-NEXT:    mlufce16.m acc0, (a2), a7
; CHECK-NEXT:    msfdce16.m acc0, (a2), a7
; CHECK-NEXT:    mlufce32.m acc0, (a3), a7
; CHECK-NEXT:    msfdce32.m acc0, (a3), a7
; CHECK-NEXT:    mlufce32.m acc0, (a4), a7
; CHECK-NEXT:    msfdce32.m acc0, (a4), a7
; CHECK-NEXT:    mlufce64.m acc0, (a5), a7
; CHECK-NEXT:    msfdce64.m acc0, (a5), a7
; CHECK-NEXT:    mlufce64.m acc0, (a6), a7
; CHECK-NEXT:    msfdce64.m acc0, (a6), a7
; CHECK-NEXT:    ret
entry:
  %8 = call <vscale x 128 x i8> @llvm.riscv.mlufc.m.nxv128i8(
    <vscale x 128 x i8>* %0,
    i64 %7
  )

  call void @llvm.riscv.msfdc.m.nxv128i8(
    <vscale x 128 x i8> %8,
    <vscale x 128 x i8>* %0,
    i64 %7
  )

  %9 = call <vscale x 64 x i16> @llvm.riscv.mlufc.m.nxv64i16(
    <vscale x 64 x i16>* %1,
    i64 %7
  )

  call void @llvm.riscv.msfdc.m.nxv64i16(
    <vscale x 64 x i16> %9,
    <vscale x 64 x i16>* %1,
    i64 %7
  )

  %10 = call <vscale x 64 x half> @llvm.riscv.mlufc.m.nxv64f16(
    <vscale x 64 x half>* %2,
    i64 %7
  )

  call void @llvm.riscv.msfdc.m.nxv64f16(
    <vscale x 64 x half> %10,
    <vscale x 64 x half>* %2,
    i64 %7
  )

  %11 = call <vscale x 32 x i32> @llvm.riscv.mlufc.m.nxv32i32(
    <vscale x 32 x i32>* %3,
    i64 %7
  )

  call void @llvm.riscv.msfdc.m.nxv32i32(
    <vscale x 32 x i32> %11,
    <vscale x 32 x i32>* %3,
    i64 %7
  )

  %12 = call <vscale x 32 x float> @llvm.riscv.mlufc.m.nxv32f32(
    <vscale x 32 x float>* %4,
    i64 %7
  )

  call void @llvm.riscv.msfdc.m.nxv32f32(
    <vscale x 32 x float> %12,
    <vscale x 32 x float>* %4,
    i64 %7
  )

  %13 = call <vscale x 16 x i64> @llvm.riscv.mlufc.m.nxv16i64(
    <vscale x 16 x i64>* %5,
    i64 %7
  )

  call void @llvm.riscv.msfdc.m.nxv16i64(
    <vscale x 16 x i64> %13,
    <vscale x 16 x i64>* %5,
    i64 %7
  )

  %14 = call <vscale x 16 x double> @llvm.riscv.mlufc.m.nxv16f64(
    <vscale x 16 x double>* %6,
    i64 %7
  )

  call void @llvm.riscv.msfdc.m.nxv16f64(
    <vscale x 16 x double> %14,
    <vscale x 16 x double>* %6,
    i64 %7
  )
  ret void
}
