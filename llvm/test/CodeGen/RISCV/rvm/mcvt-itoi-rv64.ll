; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-matrix -mattr=+experimental-v,+d,+experimental-zfh \
; RUN:   -verify-machineinstrs < %s | FileCheck %s

declare <vscale x 128 x i8> @llvm.riscv.mlc.m.nxv128i8(
  <vscale x 128 x i8>*,
  i64)

declare void @llvm.riscv.msc.m.nxv128i8(
  <vscale x 128 x i8>,
  <vscale x 128 x i8>*,
  i64)

declare <vscale x 64 x i16> @llvm.riscv.mlc.m.nxv64i16(
  <vscale x 64 x i16>*,
  i64)

declare void @llvm.riscv.msc.m.nxv64i16(
  <vscale x 64 x i16>,
  <vscale x 64 x i16>*,
  i64)

declare <vscale x 32 x i32> @llvm.riscv.mlc.m.nxv32i32(
  <vscale x 32 x i32>*,
  i64)

declare void @llvm.riscv.msc.m.nxv32i32(
  <vscale x 32 x i32>,
  <vscale x 32 x i32>*,
  i64)

declare <vscale x 16 x i64> @llvm.riscv.mlc.m.nxv16i64(
  <vscale x 16 x i64>*,
  i64)

declare void @llvm.riscv.msc.m.nxv16i64(
  <vscale x 16 x i64>,
  <vscale x 16 x i64>*,
  i64)

declare <vscale x 128 x i8> @llvm.riscv.mcvt.x.xu.m.nxv128i8(
  <vscale x 128 x i8>
)

define void @intrinsic_mcvt_x_xu_nxv128i8(<vscale x 128 x i8>* %0, i64 %1) {
; CHECK-LABEL: intrinsic_mcvt_x_xu_nxv128i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce8.m acc0, (a0), a1
; CHECK-NEXT:    mcvt.x.xu.m acc0, acc0
; CHECK-NEXT:    msce8.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 128 x i8> @llvm.riscv.mlc.m.nxv128i8(
    <vscale x 128 x i8>* %0,
    i64 %1
  )

  %3 = call <vscale x 128 x i8> @llvm.riscv.mcvt.x.xu.m.nxv128i8(
    <vscale x 128 x i8> %2
  )

  call void @llvm.riscv.msc.m.nxv128i8(
    <vscale x 128 x i8> %3,
    <vscale x 128 x i8>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 128 x i8> @llvm.riscv.mcvt.b.ub.m.nxv128i8(
  <vscale x 128 x i8>
)

define void @intrinsic_mcvt_b_ub_nxv128i8(<vscale x 128 x i8>* %0, i64 %1) {
; CHECK-LABEL: intrinsic_mcvt_b_ub_nxv128i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce8.m acc0, (a0), a1
; CHECK-NEXT:    mcvt.b.ub.m acc0, acc0
; CHECK-NEXT:    msce8.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 128 x i8> @llvm.riscv.mlc.m.nxv128i8(
    <vscale x 128 x i8>* %0,
    i64 %1
  )

  %3 = call <vscale x 128 x i8> @llvm.riscv.mcvt.b.ub.m.nxv128i8(
    <vscale x 128 x i8> %2
  )

  call void @llvm.riscv.msc.m.nxv128i8(
    <vscale x 128 x i8> %3,
    <vscale x 128 x i8>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 64 x i16> @llvm.riscv.mcvt.x.xu.m.nxv64i16(
  <vscale x 64 x i16>
)

define void @intrinsic_mcvt_x_xu_nxv64i16(<vscale x 64 x i16>* %0, i64 %1) {
; CHECK-LABEL: intrinsic_mcvt_x_xu_nxv64i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce16.m acc0, (a0), a1
; CHECK-NEXT:    mcvt.x.xu.m acc0, acc0
; CHECK-NEXT:    msce16.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 64 x i16> @llvm.riscv.mlc.m.nxv64i16(
    <vscale x 64 x i16>* %0,
    i64 %1
  )

  %3 = call <vscale x 64 x i16> @llvm.riscv.mcvt.x.xu.m.nxv64i16(
    <vscale x 64 x i16> %2
  )

  call void @llvm.riscv.msc.m.nxv64i16(
    <vscale x 64 x i16> %3,
    <vscale x 64 x i16>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 64 x i16> @llvm.riscv.mcvt.h.uh.m.nxv64i16(
  <vscale x 64 x i16>
)

define void @intrinsic_mcvt_h_uh_nxv64i16(<vscale x 64 x i16>* %0, i64 %1) {
; CHECK-LABEL: intrinsic_mcvt_h_uh_nxv64i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce16.m acc0, (a0), a1
; CHECK-NEXT:    mcvt.h.uh.m acc0, acc0
; CHECK-NEXT:    msce16.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 64 x i16> @llvm.riscv.mlc.m.nxv64i16(
    <vscale x 64 x i16>* %0,
    i64 %1
  )

  %3 = call <vscale x 64 x i16> @llvm.riscv.mcvt.h.uh.m.nxv64i16(
    <vscale x 64 x i16> %2
  )

  call void @llvm.riscv.msc.m.nxv64i16(
    <vscale x 64 x i16> %3,
    <vscale x 64 x i16>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 32 x i32> @llvm.riscv.mcvt.x.xu.m.nxv32i32(
  <vscale x 32 x i32>
)

define void @intrinsic_mcvt_x_xu_nxv32i32(<vscale x 32 x i32>* %0, i64 %1) {
; CHECK-LABEL: intrinsic_mcvt_x_xu_nxv32i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce32.m acc0, (a0), a1
; CHECK-NEXT:    mcvt.x.xu.m acc0, acc0
; CHECK-NEXT:    msce32.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 32 x i32> @llvm.riscv.mlc.m.nxv32i32(
    <vscale x 32 x i32>* %0,
    i64 %1
  )

  %3 = call <vscale x 32 x i32> @llvm.riscv.mcvt.x.xu.m.nxv32i32(
    <vscale x 32 x i32> %2
  )

  call void @llvm.riscv.msc.m.nxv32i32(
    <vscale x 32 x i32> %3,
    <vscale x 32 x i32>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 32 x i32> @llvm.riscv.mcvt.w.uw.m.nxv32i32(
  <vscale x 32 x i32>
)

define void @intrinsic_mcvt_w_uw_nxv32i32(<vscale x 32 x i32>* %0, i64 %1) {
; CHECK-LABEL: intrinsic_mcvt_w_uw_nxv32i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce32.m acc0, (a0), a1
; CHECK-NEXT:    mcvt.w.uw.m acc0, acc0
; CHECK-NEXT:    msce32.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 32 x i32> @llvm.riscv.mlc.m.nxv32i32(
    <vscale x 32 x i32>* %0,
    i64 %1
  )

  %3 = call <vscale x 32 x i32> @llvm.riscv.mcvt.w.uw.m.nxv32i32(
    <vscale x 32 x i32> %2
  )

  call void @llvm.riscv.msc.m.nxv32i32(
    <vscale x 32 x i32> %3,
    <vscale x 32 x i32>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 16 x i64> @llvm.riscv.mcvt.x.xu.m.nxv16i64(
  <vscale x 16 x i64>
)

define void @intrinsic_mcvt_x_xu_nxv16i64(<vscale x 16 x i64>* %0, i64 %1) {
; CHECK-LABEL: intrinsic_mcvt_x_xu_nxv16i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce64.m acc0, (a0), a1
; CHECK-NEXT:    mcvt.x.xu.m acc0, acc0
; CHECK-NEXT:    msce64.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 16 x i64> @llvm.riscv.mlc.m.nxv16i64(
    <vscale x 16 x i64>* %0,
    i64 %1
  )

  %3 = call <vscale x 16 x i64> @llvm.riscv.mcvt.x.xu.m.nxv16i64(
    <vscale x 16 x i64> %2
  )

  call void @llvm.riscv.msc.m.nxv16i64(
    <vscale x 16 x i64> %3,
    <vscale x 16 x i64>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 16 x i64> @llvm.riscv.mcvt.dw.udw.m.nxv16i64(
  <vscale x 16 x i64>
)

define void @intrinsic_mcvt_dw_udw_nxv16i64(<vscale x 16 x i64>* %0, i64 %1) {
; CHECK-LABEL: intrinsic_mcvt_dw_udw_nxv16i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce64.m acc0, (a0), a1
; CHECK-NEXT:    mcvt.dw.udw.m acc0, acc0
; CHECK-NEXT:    msce64.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 16 x i64> @llvm.riscv.mlc.m.nxv16i64(
    <vscale x 16 x i64>* %0,
    i64 %1
  )

  %3 = call <vscale x 16 x i64> @llvm.riscv.mcvt.dw.udw.m.nxv16i64(
    <vscale x 16 x i64> %2
  )

  call void @llvm.riscv.msc.m.nxv16i64(
    <vscale x 16 x i64> %3,
    <vscale x 16 x i64>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 128 x i8> @llvm.riscv.mcvt.xu.x.m.nxv128i8(
  <vscale x 128 x i8>
)

define void @intrinsic_mcvt_xu_x_nxv128i8(<vscale x 128 x i8>* %0, i64 %1) {
; CHECK-LABEL: intrinsic_mcvt_xu_x_nxv128i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce8.m acc0, (a0), a1
; CHECK-NEXT:    mcvt.xu.x.m acc0, acc0
; CHECK-NEXT:    msce8.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 128 x i8> @llvm.riscv.mlc.m.nxv128i8(
    <vscale x 128 x i8>* %0,
    i64 %1
  )

  %3 = call <vscale x 128 x i8> @llvm.riscv.mcvt.xu.x.m.nxv128i8(
    <vscale x 128 x i8> %2
  )

  call void @llvm.riscv.msc.m.nxv128i8(
    <vscale x 128 x i8> %3,
    <vscale x 128 x i8>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 128 x i8> @llvm.riscv.mcvt.ub.b.m.nxv128i8(
  <vscale x 128 x i8>
)

define void @intrinsic_mcvt_ub_b_nxv128i8(<vscale x 128 x i8>* %0, i64 %1) {
; CHECK-LABEL: intrinsic_mcvt_ub_b_nxv128i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce8.m acc0, (a0), a1
; CHECK-NEXT:    mcvt.ub.b.m acc0, acc0
; CHECK-NEXT:    msce8.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 128 x i8> @llvm.riscv.mlc.m.nxv128i8(
    <vscale x 128 x i8>* %0,
    i64 %1
  )

  %3 = call <vscale x 128 x i8> @llvm.riscv.mcvt.ub.b.m.nxv128i8(
    <vscale x 128 x i8> %2
  )

  call void @llvm.riscv.msc.m.nxv128i8(
    <vscale x 128 x i8> %3,
    <vscale x 128 x i8>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 64 x i16> @llvm.riscv.mcvt.xu.x.m.nxv64i16(
  <vscale x 64 x i16>
)

define void @intrinsic_mcvt_xu_x_nxv64i16(<vscale x 64 x i16>* %0, i64 %1) {
; CHECK-LABEL: intrinsic_mcvt_xu_x_nxv64i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce16.m acc0, (a0), a1
; CHECK-NEXT:    mcvt.xu.x.m acc0, acc0
; CHECK-NEXT:    msce16.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 64 x i16> @llvm.riscv.mlc.m.nxv64i16(
    <vscale x 64 x i16>* %0,
    i64 %1
  )

  %3 = call <vscale x 64 x i16> @llvm.riscv.mcvt.xu.x.m.nxv64i16(
    <vscale x 64 x i16> %2
  )

  call void @llvm.riscv.msc.m.nxv64i16(
    <vscale x 64 x i16> %3,
    <vscale x 64 x i16>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 64 x i16> @llvm.riscv.mcvt.uh.h.m.nxv64i16(
  <vscale x 64 x i16>
)

define void @intrinsic_mcvt_uh_h_nxv64i16(<vscale x 64 x i16>* %0, i64 %1) {
; CHECK-LABEL: intrinsic_mcvt_uh_h_nxv64i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce16.m acc0, (a0), a1
; CHECK-NEXT:    mcvt.uh.h.m acc0, acc0
; CHECK-NEXT:    msce16.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 64 x i16> @llvm.riscv.mlc.m.nxv64i16(
    <vscale x 64 x i16>* %0,
    i64 %1
  )

  %3 = call <vscale x 64 x i16> @llvm.riscv.mcvt.uh.h.m.nxv64i16(
    <vscale x 64 x i16> %2
  )

  call void @llvm.riscv.msc.m.nxv64i16(
    <vscale x 64 x i16> %3,
    <vscale x 64 x i16>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 32 x i32> @llvm.riscv.mcvt.xu.x.m.nxv32i32(
  <vscale x 32 x i32>
)

define void @intrinsic_mcvt_xu_x_nxv32i32(<vscale x 32 x i32>* %0, i64 %1) {
; CHECK-LABEL: intrinsic_mcvt_xu_x_nxv32i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce32.m acc0, (a0), a1
; CHECK-NEXT:    mcvt.xu.x.m acc0, acc0
; CHECK-NEXT:    msce32.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 32 x i32> @llvm.riscv.mlc.m.nxv32i32(
    <vscale x 32 x i32>* %0,
    i64 %1
  )

  %3 = call <vscale x 32 x i32> @llvm.riscv.mcvt.xu.x.m.nxv32i32(
    <vscale x 32 x i32> %2
  )

  call void @llvm.riscv.msc.m.nxv32i32(
    <vscale x 32 x i32> %3,
    <vscale x 32 x i32>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 32 x i32> @llvm.riscv.mcvt.uw.w.m.nxv32i32(
  <vscale x 32 x i32>
)

define void @intrinsic_mcvt_uw_w_nxv32i32(<vscale x 32 x i32>* %0, i64 %1) {
; CHECK-LABEL: intrinsic_mcvt_uw_w_nxv32i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce32.m acc0, (a0), a1
; CHECK-NEXT:    mcvt.uw.w.m acc0, acc0
; CHECK-NEXT:    msce32.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 32 x i32> @llvm.riscv.mlc.m.nxv32i32(
    <vscale x 32 x i32>* %0,
    i64 %1
  )

  %3 = call <vscale x 32 x i32> @llvm.riscv.mcvt.uw.w.m.nxv32i32(
    <vscale x 32 x i32> %2
  )

  call void @llvm.riscv.msc.m.nxv32i32(
    <vscale x 32 x i32> %3,
    <vscale x 32 x i32>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 16 x i64> @llvm.riscv.mcvt.xu.x.m.nxv16i64(
  <vscale x 16 x i64>
)

define void @intrinsic_mcvt_xu_x_nxv16i64(<vscale x 16 x i64>* %0, i64 %1) {
; CHECK-LABEL: intrinsic_mcvt_xu_x_nxv16i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce64.m acc0, (a0), a1
; CHECK-NEXT:    mcvt.xu.x.m acc0, acc0
; CHECK-NEXT:    msce64.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 16 x i64> @llvm.riscv.mlc.m.nxv16i64(
    <vscale x 16 x i64>* %0,
    i64 %1
  )

  %3 = call <vscale x 16 x i64> @llvm.riscv.mcvt.xu.x.m.nxv16i64(
    <vscale x 16 x i64> %2
  )

  call void @llvm.riscv.msc.m.nxv16i64(
    <vscale x 16 x i64> %3,
    <vscale x 16 x i64>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 16 x i64> @llvm.riscv.mcvt.udw.dw.m.nxv16i64(
  <vscale x 16 x i64>
)

define void @intrinsic_mcvt_udw_dw_nxv16i64(<vscale x 16 x i64>* %0, i64 %1) {
; CHECK-LABEL: intrinsic_mcvt_udw_dw_nxv16i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce64.m acc0, (a0), a1
; CHECK-NEXT:    mcvt.udw.dw.m acc0, acc0
; CHECK-NEXT:    msce64.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 16 x i64> @llvm.riscv.mlc.m.nxv16i64(
    <vscale x 16 x i64>* %0,
    i64 %1
  )

  %3 = call <vscale x 16 x i64> @llvm.riscv.mcvt.udw.dw.m.nxv16i64(
    <vscale x 16 x i64> %2
  )

  call void @llvm.riscv.msc.m.nxv16i64(
    <vscale x 16 x i64> %3,
    <vscale x 16 x i64>* %0,
    i64 %1
  )

  ret void
}
