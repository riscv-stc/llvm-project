; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-matrix -mattr=+experimental-v \
; RUN:   -verify-machineinstrs < %s | FileCheck %s

declare <vscale x 128 x i8> @llvm.riscv.mlae.m(
  <vscale x 128 x i8>*,
  i64, i64)

declare void @llvm.riscv.msae.m(
  <vscale x 128 x i8>,
  <vscale x 128 x i8>*,
  i64, i64)

declare <vscale x 128 x i8> @llvm.riscv.mbcar.m(
  <vscale x 128 x i8>
)

declare <vscale x 128 x i8> @llvm.riscv.mbcbr.m(
  <vscale x 128 x i8>
)

declare <vscale x 128 x i8> @llvm.riscv.mbccr.m(
  <vscale x 128 x i8>
)

declare <vscale x 128 x i8> @llvm.riscv.mbcac.m(
  <vscale x 128 x i8>
)

declare <vscale x 128 x i8> @llvm.riscv.mbcbc.m(
  <vscale x 128 x i8>
)

declare <vscale x 128 x i8> @llvm.riscv.mbccc.m(
  <vscale x 128 x i8>
)

declare <vscale x 128 x i8> @llvm.riscv.mbcae.m(
  <vscale x 128 x i8>
)

declare <vscale x 128 x i8> @llvm.riscv.mbcbe.m(
  <vscale x 128 x i8>
)

declare <vscale x 128 x i8> @llvm.riscv.mbcce.m(
  <vscale x 128 x i8>
)

define void @intrinsic_mlae_msae(<vscale x 128 x i8>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mlae_msae:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae8.m tr0, (a0), a1, m1
; CHECK-NEXT:    mbcar.m tr0, tr0
; CHECK-NEXT:    mbcbr.m tr0, tr0
; CHECK-NEXT:    mbccr.m tr0, tr0
; CHECK-NEXT:    mbcac.m tr0, tr0
; CHECK-NEXT:    mbcbc.m tr0, tr0
; CHECK-NEXT:    mbccc.m tr0, tr0
; CHECK-NEXT:    mbcae.m tr0, tr0
; CHECK-NEXT:    mbcbe.m tr0, tr0
; CHECK-NEXT:    mbcce.m tr0, tr0
; CHECK-NEXT:    msae8.m tr0, (a0), a1, m1
; CHECK-NEXT:    ret
entry:

  %2 = call <vscale x 128 x i8> @llvm.riscv.mlae.m(
    <vscale x 128 x i8>* %0,
    i64 %1, i64 0)

  %3 = call <vscale x 128 x i8> @llvm.riscv.mbcar.m(<vscale x 128 x i8> %2)
  %4 = call <vscale x 128 x i8> @llvm.riscv.mbcbr.m(<vscale x 128 x i8> %3)
  %5 = call <vscale x 128 x i8> @llvm.riscv.mbccr.m(<vscale x 128 x i8> %4)
  %6 = call <vscale x 128 x i8> @llvm.riscv.mbcac.m(<vscale x 128 x i8> %5)
  %7 = call <vscale x 128 x i8> @llvm.riscv.mbcbc.m(<vscale x 128 x i8> %6)
  %8 = call <vscale x 128 x i8> @llvm.riscv.mbccc.m(<vscale x 128 x i8> %7)
  %9 = call <vscale x 128 x i8> @llvm.riscv.mbcae.m(<vscale x 128 x i8> %8)
  %10 = call <vscale x 128 x i8> @llvm.riscv.mbcbe.m(<vscale x 128 x i8> %9)
  %11 = call <vscale x 128 x i8> @llvm.riscv.mbcce.m(<vscale x 128 x i8> %10)

  call void @llvm.riscv.msae.m(
    <vscale x 128 x i8> %11,
    <vscale x 128 x i8>* %0,
    i64 %1, i64 0)

  ret void
}
