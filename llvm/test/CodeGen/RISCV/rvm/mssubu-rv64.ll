; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-matrix -mattr=+experimental-v,+d,+experimental-zfh \
; RUN:   -verify-machineinstrs < %s | FileCheck %s

declare <vscale x 128 x i8> @llvm.riscv.mlc.m.nxv128i8(
  <vscale x 128 x i8>*,
  i64)

declare void @llvm.riscv.msc.m.nxv128i8(
  <vscale x 128 x i8>,
  <vscale x 128 x i8>*,
  i64)

declare <vscale x 128 x i8> @llvm.riscv.mssubu.mm.nxv128i8(
  <vscale x 128 x i8>,
  <vscale x 128 x i8>
)

define void @intrinsic_mssubu_mm_nxv128i8(<vscale x 128 x i8>* %0, <vscale x 128 x i8>* %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_mssubu_mm_nxv128i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce8.m acc0, (a0), a2
; CHECK-NEXT:    mlce8.m acc1, (a1), a2
; CHECK-NEXT:    mssubu.mm acc0, acc0, acc1
; CHECK-NEXT:    msce8.m acc0, (a0), a2
; CHECK-NEXT:    ret
entry:
  %3 = call <vscale x 128 x i8> @llvm.riscv.mlc.m.nxv128i8(
    <vscale x 128 x i8>* %0,
    i64 %2
  )

  %4 = call <vscale x 128 x i8> @llvm.riscv.mlc.m.nxv128i8(
    <vscale x 128 x i8>* %1,
    i64 %2
  )

  %5 = call <vscale x 128 x i8> @llvm.riscv.mssubu.mm.nxv128i8(
    <vscale x 128 x i8> %3,
    <vscale x 128 x i8> %4
  )

  call void @llvm.riscv.msc.m.nxv128i8(
    <vscale x 128 x i8> %5,
    <vscale x 128 x i8>* %0,
    i64 %2
  )

  ret void
}

declare <vscale x 128 x i8> @llvm.riscv.mssubu.b.mm.nxv128i8(
  <vscale x 128 x i8>,
  <vscale x 128 x i8>
)

define void @intrinsic_mssubu_b_mm_nxv128i8(<vscale x 128 x i8>* %0, <vscale x 128 x i8>* %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_mssubu_b_mm_nxv128i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce8.m acc0, (a0), a2
; CHECK-NEXT:    mlce8.m acc1, (a1), a2
; CHECK-NEXT:    mssubu.b.mm acc0, acc0, acc1
; CHECK-NEXT:    msce8.m acc0, (a0), a2
; CHECK-NEXT:    ret
entry:
  %3 = call <vscale x 128 x i8> @llvm.riscv.mlc.m.nxv128i8(
    <vscale x 128 x i8>* %0,
    i64 %2
  )

  %4 = call <vscale x 128 x i8> @llvm.riscv.mlc.m.nxv128i8(
    <vscale x 128 x i8>* %1,
    i64 %2
  )

  %5 = call <vscale x 128 x i8> @llvm.riscv.mssubu.b.mm.nxv128i8(
    <vscale x 128 x i8> %3,
    <vscale x 128 x i8> %4
  )

  call void @llvm.riscv.msc.m.nxv128i8(
    <vscale x 128 x i8> %5,
    <vscale x 128 x i8>* %0,
    i64 %2
  )

  ret void
}

declare <vscale x 64 x i16> @llvm.riscv.mlc.m.nxv64i16(
  <vscale x 64 x i16>*,
  i64)

declare void @llvm.riscv.msc.m.nxv64i16(
  <vscale x 64 x i16>,
  <vscale x 64 x i16>*,
  i64)

declare <vscale x 64 x i16> @llvm.riscv.mssubu.mm.nxv64i16(
  <vscale x 64 x i16>,
  <vscale x 64 x i16>
)

define void @intrinsic_mssubu_mm_nxv64i16(<vscale x 64 x i16>* %0, <vscale x 64 x i16>* %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_mssubu_mm_nxv64i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce16.m acc0, (a0), a2
; CHECK-NEXT:    mlce16.m acc1, (a1), a2
; CHECK-NEXT:    mssubu.mm acc0, acc0, acc1
; CHECK-NEXT:    msce16.m acc0, (a0), a2
; CHECK-NEXT:    ret
entry:
  %3 = call <vscale x 64 x i16> @llvm.riscv.mlc.m.nxv64i16(
    <vscale x 64 x i16>* %0,
    i64 %2
  )

  %4 = call <vscale x 64 x i16> @llvm.riscv.mlc.m.nxv64i16(
    <vscale x 64 x i16>* %1,
    i64 %2
  )

  %5 = call <vscale x 64 x i16> @llvm.riscv.mssubu.mm.nxv64i16(
    <vscale x 64 x i16> %3,
    <vscale x 64 x i16> %4
  )

  call void @llvm.riscv.msc.m.nxv64i16(
    <vscale x 64 x i16> %5,
    <vscale x 64 x i16>* %0,
    i64 %2
  )

  ret void
}

declare <vscale x 64 x i16> @llvm.riscv.mssubu.h.mm.nxv64i16(
  <vscale x 64 x i16>,
  <vscale x 64 x i16>
)

define void @intrinsic_mssubu_h_mm_nxv64i16(<vscale x 64 x i16>* %0, <vscale x 64 x i16>* %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_mssubu_h_mm_nxv64i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce16.m acc0, (a0), a2
; CHECK-NEXT:    mlce16.m acc1, (a1), a2
; CHECK-NEXT:    mssubu.h.mm acc0, acc0, acc1
; CHECK-NEXT:    msce16.m acc0, (a0), a2
; CHECK-NEXT:    ret
entry:
  %3 = call <vscale x 64 x i16> @llvm.riscv.mlc.m.nxv64i16(
    <vscale x 64 x i16>* %0,
    i64 %2
  )

  %4 = call <vscale x 64 x i16> @llvm.riscv.mlc.m.nxv64i16(
    <vscale x 64 x i16>* %1,
    i64 %2
  )

  %5 = call <vscale x 64 x i16> @llvm.riscv.mssubu.h.mm.nxv64i16(
    <vscale x 64 x i16> %3,
    <vscale x 64 x i16> %4
  )

  call void @llvm.riscv.msc.m.nxv64i16(
    <vscale x 64 x i16> %5,
    <vscale x 64 x i16>* %0,
    i64 %2
  )

  ret void
}

declare <vscale x 32 x i32> @llvm.riscv.mlc.m.nxv32i32(
  <vscale x 32 x i32>*,
  i64)

declare void @llvm.riscv.msc.m.nxv32i32(
  <vscale x 32 x i32>,
  <vscale x 32 x i32>*,
  i64)

declare <vscale x 32 x i32> @llvm.riscv.mssubu.mm.nxv32i32(
  <vscale x 32 x i32>,
  <vscale x 32 x i32>
)

define void @intrinsic_mssubu_mm_nxv32i32(<vscale x 32 x i32>* %0, <vscale x 32 x i32>* %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_mssubu_mm_nxv32i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce32.m acc0, (a0), a2
; CHECK-NEXT:    mlce32.m acc1, (a1), a2
; CHECK-NEXT:    mssubu.mm acc0, acc0, acc1
; CHECK-NEXT:    msce32.m acc0, (a0), a2
; CHECK-NEXT:    ret
entry:
  %3 = call <vscale x 32 x i32> @llvm.riscv.mlc.m.nxv32i32(
    <vscale x 32 x i32>* %0,
    i64 %2
  )

  %4 = call <vscale x 32 x i32> @llvm.riscv.mlc.m.nxv32i32(
    <vscale x 32 x i32>* %1,
    i64 %2
  )

  %5 = call <vscale x 32 x i32> @llvm.riscv.mssubu.mm.nxv32i32(
    <vscale x 32 x i32> %3,
    <vscale x 32 x i32> %4
  )

  call void @llvm.riscv.msc.m.nxv32i32(
    <vscale x 32 x i32> %5,
    <vscale x 32 x i32>* %0,
    i64 %2
  )

  ret void
}

declare <vscale x 32 x i32> @llvm.riscv.mssubu.w.mm.nxv32i32(
  <vscale x 32 x i32>,
  <vscale x 32 x i32>
)

define void @intrinsic_mssubu_w_mm_nxv32i32(<vscale x 32 x i32>* %0, <vscale x 32 x i32>* %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_mssubu_w_mm_nxv32i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce32.m acc0, (a0), a2
; CHECK-NEXT:    mlce32.m acc1, (a1), a2
; CHECK-NEXT:    mssubu.w.mm acc0, acc0, acc1
; CHECK-NEXT:    msce32.m acc0, (a0), a2
; CHECK-NEXT:    ret
entry:
  %3 = call <vscale x 32 x i32> @llvm.riscv.mlc.m.nxv32i32(
    <vscale x 32 x i32>* %0,
    i64 %2
  )

  %4 = call <vscale x 32 x i32> @llvm.riscv.mlc.m.nxv32i32(
    <vscale x 32 x i32>* %1,
    i64 %2
  )

  %5 = call <vscale x 32 x i32> @llvm.riscv.mssubu.w.mm.nxv32i32(
    <vscale x 32 x i32> %3,
    <vscale x 32 x i32> %4
  )

  call void @llvm.riscv.msc.m.nxv32i32(
    <vscale x 32 x i32> %5,
    <vscale x 32 x i32>* %0,
    i64 %2
  )

  ret void
}

declare <vscale x 16 x i64> @llvm.riscv.mlc.m.nxv16i64(
  <vscale x 16 x i64>*,
  i64)

declare void @llvm.riscv.msc.m.nxv16i64(
  <vscale x 16 x i64>,
  <vscale x 16 x i64>*,
  i64)

declare <vscale x 16 x i64> @llvm.riscv.mssubu.mm.nxv16i64(
  <vscale x 16 x i64>,
  <vscale x 16 x i64>
)

define void @intrinsic_mssubu_mm_nxv16i64(<vscale x 16 x i64>* %0, <vscale x 16 x i64>* %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_mssubu_mm_nxv16i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce64.m acc0, (a0), a2
; CHECK-NEXT:    mlce64.m acc1, (a1), a2
; CHECK-NEXT:    mssubu.mm acc0, acc0, acc1
; CHECK-NEXT:    msce64.m acc0, (a0), a2
; CHECK-NEXT:    ret
entry:
  %3 = call <vscale x 16 x i64> @llvm.riscv.mlc.m.nxv16i64(
    <vscale x 16 x i64>* %0,
    i64 %2
  )

  %4 = call <vscale x 16 x i64> @llvm.riscv.mlc.m.nxv16i64(
    <vscale x 16 x i64>* %1,
    i64 %2
  )

  %5 = call <vscale x 16 x i64> @llvm.riscv.mssubu.mm.nxv16i64(
    <vscale x 16 x i64> %3,
    <vscale x 16 x i64> %4
  )

  call void @llvm.riscv.msc.m.nxv16i64(
    <vscale x 16 x i64> %5,
    <vscale x 16 x i64>* %0,
    i64 %2
  )

  ret void
}

declare <vscale x 16 x i64> @llvm.riscv.mssubu.dw.mm.nxv16i64(
  <vscale x 16 x i64>,
  <vscale x 16 x i64>
)

define void @intrinsic_mssubu_dw_mm_nxv16i64(<vscale x 16 x i64>* %0, <vscale x 16 x i64>* %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_mssubu_dw_mm_nxv16i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce64.m acc0, (a0), a2
; CHECK-NEXT:    mlce64.m acc1, (a1), a2
; CHECK-NEXT:    mssubu.dw.mm acc0, acc0, acc1
; CHECK-NEXT:    msce64.m acc0, (a0), a2
; CHECK-NEXT:    ret
entry:
  %3 = call <vscale x 16 x i64> @llvm.riscv.mlc.m.nxv16i64(
    <vscale x 16 x i64>* %0,
    i64 %2
  )

  %4 = call <vscale x 16 x i64> @llvm.riscv.mlc.m.nxv16i64(
    <vscale x 16 x i64>* %1,
    i64 %2
  )

  %5 = call <vscale x 16 x i64> @llvm.riscv.mssubu.dw.mm.nxv16i64(
    <vscale x 16 x i64> %3,
    <vscale x 16 x i64> %4
  )

  call void @llvm.riscv.msc.m.nxv16i64(
    <vscale x 16 x i64> %5,
    <vscale x 16 x i64>* %0,
    i64 %2
  )

  ret void
}
