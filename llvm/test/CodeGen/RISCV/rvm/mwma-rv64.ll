; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-matrix -mattr=+experimental-v,+d,+experimental-zfh \
; RUN:   -verify-machineinstrs < %s | FileCheck %s

declare <vscale x 64 x i16> @llvm.riscv.mla.m.nxv64i16(
  <vscale x 64 x i16>*,
  i64)

declare <vscale x 64 x i16> @llvm.riscv.mlb.m.nxv64i16(
  <vscale x 64 x i16>*,
  i64)

declare <vscale x 32 x i32> @llvm.riscv.mlc.m.nxv32i32(
  <vscale x 32 x i32>*,
  i64)

declare void @llvm.riscv.msc.m.nxv32i32(
  <vscale x 32 x i32>,
  <vscale x 32 x i32>*,
  i64)

declare <vscale x 32 x i32> @llvm.riscv.mwma.mm.nxv32i32.nxv32i32.nxv64i16.nxv64i16(
  <vscale x 32 x i32>,
  <vscale x 64 x i16>,
  <vscale x 64 x i16>)

define void @intrinsic_mwma_mm_nxv32i32_nxv32i32_nxv64i16_nxv64i16(<vscale x 32 x i32>* %0, <vscale x 64 x i16>* %1, <vscale x 64 x i16>* %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_mwma_mm_nxv32i32_nxv32i32_nxv64i16_nxv64i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce32.m acc0, (a0), a3
; CHECK-NEXT:    mlae16.m tr0, (a1), a3
; CHECK-NEXT:    mlbe16.m tr1, (a2), a3
; CHECK-NEXT:    mwma.mm acc0, tr0, tr1
; CHECK-NEXT:    msce32.m acc0, (a0), a3
; CHECK-NEXT:    ret
entry:
  %4 = call <vscale x 32 x i32> @llvm.riscv.mlc.m.nxv32i32(
    <vscale x 32 x i32>* %0,
    i64 %3)

  %5 = call <vscale x 64 x i16> @llvm.riscv.mla.m.nxv64i16(
    <vscale x 64 x i16>* %1,
    i64 %3)

  %6 = call <vscale x 64 x i16> @llvm.riscv.mlb.m.nxv64i16(
    <vscale x 64 x i16>* %2,
    i64 %3)

  %7 = call <vscale x 32 x i32> @llvm.riscv.mwma.mm.nxv32i32.nxv32i32.nxv64i16.nxv64i16(
    <vscale x 32 x i32> %4,
    <vscale x 64 x i16> %5,
    <vscale x 64 x i16> %6)

  call void @llvm.riscv.msc.m.nxv32i32(
    <vscale x 32 x i32> %7,
    <vscale x 32 x i32>* %0,
    i64 %3)

  ret void
}

declare <vscale x 32 x i32> @llvm.riscv.mwma.h.mm.nxv32i32.nxv32i32.nxv64i16.nxv64i16(
  <vscale x 32 x i32>,
  <vscale x 64 x i16>,
  <vscale x 64 x i16>)

define void @intrinsic_mwma_h_mm_nxv32i32_nxv32i32_nxv64i16_nxv64i16(<vscale x 32 x i32>* %0, <vscale x 64 x i16>* %1, <vscale x 64 x i16>* %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_mwma_h_mm_nxv32i32_nxv32i32_nxv64i16_nxv64i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce32.m acc0, (a0), a3
; CHECK-NEXT:    mlae16.m tr0, (a1), a3
; CHECK-NEXT:    mlbe16.m tr1, (a2), a3
; CHECK-NEXT:    mwma.h.mm acc0, tr0, tr1
; CHECK-NEXT:    msce32.m acc0, (a0), a3
; CHECK-NEXT:    ret
entry:
  %4 = call <vscale x 32 x i32> @llvm.riscv.mlc.m.nxv32i32(
    <vscale x 32 x i32>* %0,
    i64 %3)

  %5 = call <vscale x 64 x i16> @llvm.riscv.mla.m.nxv64i16(
    <vscale x 64 x i16>* %1,
    i64 %3)

  %6 = call <vscale x 64 x i16> @llvm.riscv.mlb.m.nxv64i16(
    <vscale x 64 x i16>* %2,
    i64 %3)

  %7 = call <vscale x 32 x i32> @llvm.riscv.mwma.h.mm.nxv32i32.nxv32i32.nxv64i16.nxv64i16(
    <vscale x 32 x i32> %4,
    <vscale x 64 x i16> %5,
    <vscale x 64 x i16> %6)

  call void @llvm.riscv.msc.m.nxv32i32(
    <vscale x 32 x i32> %7,
    <vscale x 32 x i32>* %0,
    i64 %3)

  ret void
}

declare <vscale x 32 x i32> @llvm.riscv.mla.m.nxv32i32(
  <vscale x 32 x i32>*,
  i64)

declare <vscale x 32 x i32> @llvm.riscv.mlb.m.nxv32i32(
  <vscale x 32 x i32>*,
  i64)

declare <vscale x 16 x i64> @llvm.riscv.mlc.m.nxv16i64(
  <vscale x 16 x i64>*,
  i64)

declare void @llvm.riscv.msc.m.nxv16i64(
  <vscale x 16 x i64>,
  <vscale x 16 x i64>*,
  i64)

declare <vscale x 16 x i64> @llvm.riscv.mwma.mm.nxv16i64.nxv16i64.nxv32i32.nxv32i32(
  <vscale x 16 x i64>,
  <vscale x 32 x i32>,
  <vscale x 32 x i32>)

define void @intrinsic_mwma_mm_nxv16i64_nxv16i64_nxv32i32_nxv32i32(<vscale x 16 x i64>* %0, <vscale x 32 x i32>* %1, <vscale x 32 x i32>* %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_mwma_mm_nxv16i64_nxv16i64_nxv32i32_nxv32i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce64.m acc0, (a0), a3
; CHECK-NEXT:    mlae32.m tr0, (a1), a3
; CHECK-NEXT:    mlbe32.m tr1, (a2), a3
; CHECK-NEXT:    mwma.mm acc0, tr0, tr1
; CHECK-NEXT:    msce64.m acc0, (a0), a3
; CHECK-NEXT:    ret
entry:
  %4 = call <vscale x 16 x i64> @llvm.riscv.mlc.m.nxv16i64(
    <vscale x 16 x i64>* %0,
    i64 %3)

  %5 = call <vscale x 32 x i32> @llvm.riscv.mla.m.nxv32i32(
    <vscale x 32 x i32>* %1,
    i64 %3)

  %6 = call <vscale x 32 x i32> @llvm.riscv.mlb.m.nxv32i32(
    <vscale x 32 x i32>* %2,
    i64 %3)

  %7 = call <vscale x 16 x i64> @llvm.riscv.mwma.mm.nxv16i64.nxv16i64.nxv32i32.nxv32i32(
    <vscale x 16 x i64> %4,
    <vscale x 32 x i32> %5,
    <vscale x 32 x i32> %6)

  call void @llvm.riscv.msc.m.nxv16i64(
    <vscale x 16 x i64> %7,
    <vscale x 16 x i64>* %0,
    i64 %3)

  ret void
}

declare <vscale x 16 x i64> @llvm.riscv.mwma.w.mm.nxv16i64.nxv16i64.nxv32i32.nxv32i32(
  <vscale x 16 x i64>,
  <vscale x 32 x i32>,
  <vscale x 32 x i32>)

define void @intrinsic_mwma_w_mm_nxv16i64_nxv16i64_nxv32i32_nxv32i32(<vscale x 16 x i64>* %0, <vscale x 32 x i32>* %1, <vscale x 32 x i32>* %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_mwma_w_mm_nxv16i64_nxv16i64_nxv32i32_nxv32i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce64.m acc0, (a0), a3
; CHECK-NEXT:    mlae32.m tr0, (a1), a3
; CHECK-NEXT:    mlbe32.m tr1, (a2), a3
; CHECK-NEXT:    mwma.w.mm acc0, tr0, tr1
; CHECK-NEXT:    msce64.m acc0, (a0), a3
; CHECK-NEXT:    ret
entry:
  %4 = call <vscale x 16 x i64> @llvm.riscv.mlc.m.nxv16i64(
    <vscale x 16 x i64>* %0,
    i64 %3)

  %5 = call <vscale x 32 x i32> @llvm.riscv.mla.m.nxv32i32(
    <vscale x 32 x i32>* %1,
    i64 %3)

  %6 = call <vscale x 32 x i32> @llvm.riscv.mlb.m.nxv32i32(
    <vscale x 32 x i32>* %2,
    i64 %3)

  %7 = call <vscale x 16 x i64> @llvm.riscv.mwma.w.mm.nxv16i64.nxv16i64.nxv32i32.nxv32i32(
    <vscale x 16 x i64> %4,
    <vscale x 32 x i32> %5,
    <vscale x 32 x i32> %6)

  call void @llvm.riscv.msc.m.nxv16i64(
    <vscale x 16 x i64> %7,
    <vscale x 16 x i64>* %0,
    i64 %3)

  ret void
}
