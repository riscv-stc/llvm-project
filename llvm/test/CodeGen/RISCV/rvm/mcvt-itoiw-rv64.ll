; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-matrix -mattr=+experimental-v,+d,+experimental-zfh \
; RUN:   -verify-machineinstrs < %s | FileCheck %s

declare <vscale x 128 x i8> @llvm.riscv.mlc.m.nxv128i8(
  <vscale x 128 x i8>*,
  i64)

declare void @llvm.riscv.msc.m.nxv128i8(
  <vscale x 128 x i8>,
  <vscale x 128 x i8>*,
  i64)

declare <vscale x 64 x i16> @llvm.riscv.mlc.m.nxv64i16(
  <vscale x 64 x i16>*,
  i64)

declare void @llvm.riscv.msc.m.nxv64i16(
  <vscale x 64 x i16>,
  <vscale x 64 x i16>*,
  i64)

declare <vscale x 32 x i32> @llvm.riscv.mlc.m.nxv32i32(
  <vscale x 32 x i32>*,
  i64)

declare void @llvm.riscv.msc.m.nxv32i32(
  <vscale x 32 x i32>,
  <vscale x 32 x i32>*,
  i64)

declare <vscale x 16 x i64> @llvm.riscv.mlc.m.nxv16i64(
  <vscale x 16 x i64>*,
  i64)

declare void @llvm.riscv.msc.m.nxv16i64(
  <vscale x 16 x i64>,
  <vscale x 16 x i64>*,
  i64)

; mwcvtu.xw.x.m u8 -> u16
declare <vscale x 64 x i16> @llvm.riscv.mwcvtu.xw.x.m.nxv64i16.nxv128i8(
  <vscale x 128 x i8>
)

define void @intrinsic_mwcvtu_xw_x_m_nxv64i16_nxv128i8(<vscale x 128 x i8>* %0, <vscale x 64 x i16>* %1, i64 %2) {
; CHECK-LABEL: intrinsic_mwcvtu_xw_x_m_nxv64i16_nxv128i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce8.m acc0, (a0), a2
; CHECK-NEXT:    mwcvtu.xw.x.m acc0, acc0
; CHECK-NEXT:    msce16.m acc0, (a1), a2
; CHECK-NEXT:    ret
entry:
  %3 = call <vscale x 128 x i8> @llvm.riscv.mlc.m.nxv128i8(
    <vscale x 128 x i8>* %0,
    i64 %2
  )

  %4 = call <vscale x 64 x i16>@llvm.riscv.mwcvtu.xw.x.m.nxv64i16.nxv128i8(
    <vscale x 128 x i8> %3
  )

  call void @llvm.riscv.msc.m.nxv64i16(
    <vscale x 64 x i16> %4,
    <vscale x 64 x i16>* %1,
    i64 %2
  )

  ret void
}

; mwcvtu.h.b.m u8 -> u16
declare <vscale x 64 x i16> @llvm.riscv.mwcvtu.h.b.m.nxv64i16.nxv128i8(
  <vscale x 128 x i8>
)

define void @intrinsic_mwcvtu_h_b_nxv64i16_nxv128i8(<vscale x 128 x i8>* %0, <vscale x 64 x i16>* %1, i64 %2) {
; CHECK-LABEL: intrinsic_mwcvtu_h_b_nxv64i16_nxv128i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce8.m acc0, (a0), a2
; CHECK-NEXT:    mwcvtu.h.b.m acc0, acc0
; CHECK-NEXT:    msce16.m acc0, (a1), a2
; CHECK-NEXT:    ret
entry:
  %3 = call <vscale x 128 x i8> @llvm.riscv.mlc.m.nxv128i8(
    <vscale x 128 x i8>* %0,
    i64 %2
  )

  %4 = call <vscale x 64 x i16>@llvm.riscv.mwcvtu.h.b.m.nxv64i16.nxv128i8(
    <vscale x 128 x i8> %3
  )

  call void @llvm.riscv.msc.m.nxv64i16(
    <vscale x 64 x i16> %4,
    <vscale x 64 x i16>* %1,
    i64 %2
  )

  ret void
}

; mwcvtu.xw.x.m u16 -> u32
declare <vscale x 32 x i32> @llvm.riscv.mwcvtu.xw.x.m.nxv32i32.nxv64i16(
  <vscale x 64 x i16>
)

define void @intrinsic_mwcvtu_xw_x_m_nxv32i32_nxv64i16(<vscale x 64 x i16>* %0, <vscale x 32 x i32>* %1, i64 %2) {
; CHECK-LABEL: intrinsic_mwcvtu_xw_x_m_nxv32i32_nxv64i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce16.m acc0, (a0), a2
; CHECK-NEXT:    mwcvtu.xw.x.m acc0, acc0
; CHECK-NEXT:    msce32.m acc0, (a1), a2
; CHECK-NEXT:    ret
entry:
  %3 = call <vscale x 64 x i16> @llvm.riscv.mlc.m.nxv64i16(
    <vscale x 64 x i16>* %0,
    i64 %2
  )

  %4 = call <vscale x 32 x i32>@llvm.riscv.mwcvtu.xw.x.m.nxv32i32.nxv64i16(
    <vscale x 64 x i16> %3
  )

  call void @llvm.riscv.msc.m.nxv32i32(
    <vscale x 32 x i32> %4,
    <vscale x 32 x i32>* %1,
    i64 %2
  )

  ret void
}

; mwcvtu.w.h.m u16 -> u32
declare <vscale x 32 x i32> @llvm.riscv.mwcvtu.w.h.m.nxv32i32.nxv64i16(
  <vscale x 64 x i16>
)

define void @intrinsic_mwcvtu_w_h_nxv32i32_nxv64i16(<vscale x 64 x i16>* %0, <vscale x 32 x i32>* %1, i64 %2) {
; CHECK-LABEL: intrinsic_mwcvtu_w_h_nxv32i32_nxv64i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce16.m acc0, (a0), a2
; CHECK-NEXT:    mwcvtu.w.h.m acc0, acc0
; CHECK-NEXT:    msce32.m acc0, (a1), a2
; CHECK-NEXT:    ret
entry:
  %3 = call <vscale x 64 x i16> @llvm.riscv.mlc.m.nxv64i16(
    <vscale x 64 x i16>* %0,
    i64 %2
  )

  %4 = call <vscale x 32 x i32>@llvm.riscv.mwcvtu.w.h.m.nxv32i32.nxv64i16(
    <vscale x 64 x i16> %3
  )

  call void @llvm.riscv.msc.m.nxv32i32(
    <vscale x 32 x i32> %4,
    <vscale x 32 x i32>* %1,
    i64 %2
  )

  ret void
}

; mwcvtu.xw.x.m u32 -> u64
declare <vscale x 16 x i64> @llvm.riscv.mwcvtu.xw.x.m.nxv16i64.nxv32i32(
  <vscale x 32 x i32>
)

define void @intrinsic_mwcvtu_xw_x_m_nxv16i64_nxv32i32(<vscale x 32 x i32>* %0, <vscale x 16 x i64>* %1, i64 %2) {
; CHECK-LABEL: intrinsic_mwcvtu_xw_x_m_nxv16i64_nxv32i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce32.m acc0, (a0), a2
; CHECK-NEXT:    mwcvtu.xw.x.m acc0, acc0
; CHECK-NEXT:    msce64.m acc0, (a1), a2
; CHECK-NEXT:    ret
entry:
  %3 = call <vscale x 32 x i32> @llvm.riscv.mlc.m.nxv32i32(
    <vscale x 32 x i32>* %0,
    i64 %2
  )

  %4 = call <vscale x 16 x i64> @llvm.riscv.mwcvtu.xw.x.m.nxv16i64.nxv32i32(
    <vscale x 32 x i32> %3
  )

  call void @llvm.riscv.msc.m.nxv16i64(
    <vscale x 16 x i64> %4,
    <vscale x 16 x i64>* %1,
    i64 %2
  )

  ret void
}

; mwcvtu.dw.w.m u32 -> u64
declare <vscale x 16 x i64> @llvm.riscv.mwcvtu.dw.w.m.nxv16i64.nxv32i32(
  <vscale x 32 x i32>
)

define void @intrinsic_mwcvtu_dw_w_m_nxv32i32_nxv64i16(<vscale x 32 x i32>* %0, <vscale x 16 x i64>* %1, i64 %2) {
; CHECK-LABEL: intrinsic_mwcvtu_dw_w_m_nxv32i32_nxv64i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce32.m acc0, (a0), a2
; CHECK-NEXT:    mwcvtu.dw.w.m acc0, acc0
; CHECK-NEXT:    msce64.m acc0, (a1), a2
; CHECK-NEXT:    ret
entry:
  %3 = call <vscale x 32 x i32> @llvm.riscv.mlc.m.nxv32i32(
    <vscale x 32 x i32>* %0,
    i64 %2
  )

  %4 = call <vscale x 16 x i64>@llvm.riscv.mwcvtu.dw.w.m.nxv16i64.nxv32i32(
    <vscale x 32 x i32> %3
  )

  call void @llvm.riscv.msc.m.nxv16i64(
    <vscale x 16 x i64> %4,
    <vscale x 16 x i64>* %1,
    i64 %2
  )

  ret void
}

; mwcvtu.xq.x.m u8 -> u32
declare <vscale x 32 x i32> @llvm.riscv.mwcvtu.xq.x.m.nxv32i32.nxv128i8(
  <vscale x 128 x i8>
)

define void @intrinsic_mwcvtu_xq_x_m_nxv32i32_nxv128i8(<vscale x 128 x i8>* %0, <vscale x 32 x i32>* %1, i64 %2) {
; CHECK-LABEL: intrinsic_mwcvtu_xq_x_m_nxv32i32_nxv128i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce8.m acc0, (a0), a2
; CHECK-NEXT:    mwcvtu.xq.x.m acc0, acc0
; CHECK-NEXT:    msce32.m acc0, (a1), a2
; CHECK-NEXT:    ret
entry:
  %3 = call <vscale x 128 x i8> @llvm.riscv.mlc.m.nxv128i8(
    <vscale x 128 x i8>* %0,
    i64 %2
  )

  %4 = call <vscale x 32 x i32>@llvm.riscv.mwcvtu.xq.x.m.nxv32i32.nxv128i8(
    <vscale x 128 x i8> %3
  )

  call void @llvm.riscv.msc.m.nxv32i32(
    <vscale x 32 x i32> %4,
    <vscale x 32 x i32>* %1,
    i64 %2
  )

  ret void
}

; mwcvtu.w.b.m u8 -> u32
declare <vscale x 32 x i32> @llvm.riscv.mwcvtu.w.b.m.nxv32i32.nxv128i8(
  <vscale x 128 x i8>
)

define void @intrinsic_mwcvtu_w_b_m_nxv32i32_nxv128i8(<vscale x 128 x i8>* %0, <vscale x 32 x i32>* %1, i64 %2) {
; CHECK-LABEL: intrinsic_mwcvtu_w_b_m_nxv32i32_nxv128i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce8.m acc0, (a0), a2
; CHECK-NEXT:    mwcvtu.w.b.m acc0, acc0
; CHECK-NEXT:    msce32.m acc0, (a1), a2
; CHECK-NEXT:    ret
entry:
  %3 = call <vscale x 128 x i8> @llvm.riscv.mlc.m.nxv128i8(
    <vscale x 128 x i8>* %0,
    i64 %2
  )

  %4 = call <vscale x 32 x i32>@llvm.riscv.mwcvtu.w.b.m.nxv32i32.nxv128i8(
    <vscale x 128 x i8> %3
  )

  call void @llvm.riscv.msc.m.nxv32i32(
    <vscale x 32 x i32> %4,
    <vscale x 32 x i32>* %1,
    i64 %2
  )

  ret void
}

; mwcvt.xw.x.m u8 -> u16
declare <vscale x 64 x i16> @llvm.riscv.mwcvt.xw.x.m.nxv64i16.nxv128i8(
  <vscale x 128 x i8>
)

define void @intrinsic_mwcvt_xw_x_m_nxv64i16_nxv128i8(<vscale x 128 x i8>* %0, <vscale x 64 x i16>* %1, i64 %2) {
; CHECK-LABEL: intrinsic_mwcvt_xw_x_m_nxv64i16_nxv128i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce8.m acc0, (a0), a2
; CHECK-NEXT:    mwcvt.xw.x.m acc0, acc0
; CHECK-NEXT:    msce16.m acc0, (a1), a2
; CHECK-NEXT:    ret
entry:
  %3 = call <vscale x 128 x i8> @llvm.riscv.mlc.m.nxv128i8(
    <vscale x 128 x i8>* %0,
    i64 %2
  )

  %4 = call <vscale x 64 x i16>@llvm.riscv.mwcvt.xw.x.m.nxv64i16.nxv128i8(
    <vscale x 128 x i8> %3
  )

  call void @llvm.riscv.msc.m.nxv64i16(
    <vscale x 64 x i16> %4,
    <vscale x 64 x i16>* %1,
    i64 %2
  )

  ret void
}

; mwcvt.h.b.m u8 -> u16
declare <vscale x 64 x i16> @llvm.riscv.mwcvt.h.b.m.nxv64i16.nxv128i8(
  <vscale x 128 x i8>
)

define void @intrinsic_mwcvt_h_b_nxv64i16_nxv128i8(<vscale x 128 x i8>* %0, <vscale x 64 x i16>* %1, i64 %2) {
; CHECK-LABEL: intrinsic_mwcvt_h_b_nxv64i16_nxv128i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce8.m acc0, (a0), a2
; CHECK-NEXT:    mwcvt.h.b.m acc0, acc0
; CHECK-NEXT:    msce16.m acc0, (a1), a2
; CHECK-NEXT:    ret
entry:
  %3 = call <vscale x 128 x i8> @llvm.riscv.mlc.m.nxv128i8(
    <vscale x 128 x i8>* %0,
    i64 %2
  )

  %4 = call <vscale x 64 x i16>@llvm.riscv.mwcvt.h.b.m.nxv64i16.nxv128i8(
    <vscale x 128 x i8> %3
  )

  call void @llvm.riscv.msc.m.nxv64i16(
    <vscale x 64 x i16> %4,
    <vscale x 64 x i16>* %1,
    i64 %2
  )

  ret void
}

; mwcvt.xw.x.m u16 -> u32
declare <vscale x 32 x i32> @llvm.riscv.mwcvt.xw.x.m.nxv32i32.nxv64i16(
  <vscale x 64 x i16>
)

define void @intrinsic_mwcvt_xw_x_m_nxv32i32_nxv64i16(<vscale x 64 x i16>* %0, <vscale x 32 x i32>* %1, i64 %2) {
; CHECK-LABEL: intrinsic_mwcvt_xw_x_m_nxv32i32_nxv64i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce16.m acc0, (a0), a2
; CHECK-NEXT:    mwcvt.xw.x.m acc0, acc0
; CHECK-NEXT:    msce32.m acc0, (a1), a2
; CHECK-NEXT:    ret
entry:
  %3 = call <vscale x 64 x i16> @llvm.riscv.mlc.m.nxv64i16(
    <vscale x 64 x i16>* %0,
    i64 %2
  )

  %4 = call <vscale x 32 x i32>@llvm.riscv.mwcvt.xw.x.m.nxv32i32.nxv64i16(
    <vscale x 64 x i16> %3
  )

  call void @llvm.riscv.msc.m.nxv32i32(
    <vscale x 32 x i32> %4,
    <vscale x 32 x i32>* %1,
    i64 %2
  )

  ret void
}

; mwcvt.w.h.m u16 -> u32
declare <vscale x 32 x i32> @llvm.riscv.mwcvt.w.h.m.nxv32i32.nxv64i16(
  <vscale x 64 x i16>
)

define void @intrinsic_mwcvt_w_h_nxv32i32_nxv64i16(<vscale x 64 x i16>* %0, <vscale x 32 x i32>* %1, i64 %2) {
; CHECK-LABEL: intrinsic_mwcvt_w_h_nxv32i32_nxv64i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce16.m acc0, (a0), a2
; CHECK-NEXT:    mwcvt.w.h.m acc0, acc0
; CHECK-NEXT:    msce32.m acc0, (a1), a2
; CHECK-NEXT:    ret
entry:
  %3 = call <vscale x 64 x i16> @llvm.riscv.mlc.m.nxv64i16(
    <vscale x 64 x i16>* %0,
    i64 %2
  )

  %4 = call <vscale x 32 x i32>@llvm.riscv.mwcvt.w.h.m.nxv32i32.nxv64i16(
    <vscale x 64 x i16> %3
  )

  call void @llvm.riscv.msc.m.nxv32i32(
    <vscale x 32 x i32> %4,
    <vscale x 32 x i32>* %1,
    i64 %2
  )

  ret void
}

; mwcvt.xw.x.m u32 -> u64
declare <vscale x 16 x i64> @llvm.riscv.mwcvt.xw.x.m.nxv16i64.nxv32i32(
  <vscale x 32 x i32>
)

define void @intrinsic_mwcvt_xw_x_m_nxv16i64_nxv32i32(<vscale x 32 x i32>* %0, <vscale x 16 x i64>* %1, i64 %2) {
; CHECK-LABEL: intrinsic_mwcvt_xw_x_m_nxv16i64_nxv32i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce32.m acc0, (a0), a2
; CHECK-NEXT:    mwcvt.xw.x.m acc0, acc0
; CHECK-NEXT:    msce64.m acc0, (a1), a2
; CHECK-NEXT:    ret
entry:
  %3 = call <vscale x 32 x i32> @llvm.riscv.mlc.m.nxv32i32(
    <vscale x 32 x i32>* %0,
    i64 %2
  )

  %4 = call <vscale x 16 x i64> @llvm.riscv.mwcvt.xw.x.m.nxv16i64.nxv32i32(
    <vscale x 32 x i32> %3
  )

  call void @llvm.riscv.msc.m.nxv16i64(
    <vscale x 16 x i64> %4,
    <vscale x 16 x i64>* %1,
    i64 %2
  )

  ret void
}

; mwcvt.dw.w.m u32 -> u64
declare <vscale x 16 x i64> @llvm.riscv.mwcvt.dw.w.m.nxv16i64.nxv32i32(
  <vscale x 32 x i32>
)

define void @intrinsic_mwcvt_dw_w_m_nxv32i32_nxv64i16(<vscale x 32 x i32>* %0, <vscale x 16 x i64>* %1, i64 %2) {
; CHECK-LABEL: intrinsic_mwcvt_dw_w_m_nxv32i32_nxv64i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce32.m acc0, (a0), a2
; CHECK-NEXT:    mwcvt.dw.w.m acc0, acc0
; CHECK-NEXT:    msce64.m acc0, (a1), a2
; CHECK-NEXT:    ret
entry:
  %3 = call <vscale x 32 x i32> @llvm.riscv.mlc.m.nxv32i32(
    <vscale x 32 x i32>* %0,
    i64 %2
  )

  %4 = call <vscale x 16 x i64>@llvm.riscv.mwcvt.dw.w.m.nxv16i64.nxv32i32(
    <vscale x 32 x i32> %3
  )

  call void @llvm.riscv.msc.m.nxv16i64(
    <vscale x 16 x i64> %4,
    <vscale x 16 x i64>* %1,
    i64 %2
  )

  ret void
}

; mwcvt.xq.x.m u8 -> u32
declare <vscale x 32 x i32> @llvm.riscv.mwcvt.xq.x.m.nxv32i32.nxv128i8(
  <vscale x 128 x i8>
)

define void @intrinsic_mwcvt_xq_x_m_nxv32i32_nxv128i8(<vscale x 128 x i8>* %0, <vscale x 32 x i32>* %1, i64 %2) {
; CHECK-LABEL: intrinsic_mwcvt_xq_x_m_nxv32i32_nxv128i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce8.m acc0, (a0), a2
; CHECK-NEXT:    mwcvt.xq.x.m acc0, acc0
; CHECK-NEXT:    msce32.m acc0, (a1), a2
; CHECK-NEXT:    ret
entry:
  %3 = call <vscale x 128 x i8> @llvm.riscv.mlc.m.nxv128i8(
    <vscale x 128 x i8>* %0,
    i64 %2
  )

  %4 = call <vscale x 32 x i32>@llvm.riscv.mwcvt.xq.x.m.nxv32i32.nxv128i8(
    <vscale x 128 x i8> %3
  )

  call void @llvm.riscv.msc.m.nxv32i32(
    <vscale x 32 x i32> %4,
    <vscale x 32 x i32>* %1,
    i64 %2
  )

  ret void
}

; mwcvt.w.b.m u8 -> u32
declare <vscale x 32 x i32> @llvm.riscv.mwcvt.w.b.m.nxv32i32.nxv128i8(
  <vscale x 128 x i8>
)

define void @intrinsic_mwcvt_w_b_m_nxv32i32_nxv128i8(<vscale x 128 x i8>* %0, <vscale x 32 x i32>* %1, i64 %2) {
; CHECK-LABEL: intrinsic_mwcvt_w_b_m_nxv32i32_nxv128i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce8.m acc0, (a0), a2
; CHECK-NEXT:    mwcvt.w.b.m acc0, acc0
; CHECK-NEXT:    msce32.m acc0, (a1), a2
; CHECK-NEXT:    ret
entry:
  %3 = call <vscale x 128 x i8> @llvm.riscv.mlc.m.nxv128i8(
    <vscale x 128 x i8>* %0,
    i64 %2
  )

  %4 = call <vscale x 32 x i32>@llvm.riscv.mwcvt.w.b.m.nxv32i32.nxv128i8(
    <vscale x 128 x i8> %3
  )

  call void @llvm.riscv.msc.m.nxv32i32(
    <vscale x 32 x i32> %4,
    <vscale x 32 x i32>* %1,
    i64 %2
  )

  ret void
}
