; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-matrix -mattr=+experimental-v,+d,+experimental-zfh \
; RUN:   -verify-machineinstrs < %s | FileCheck %s

declare <vscale x 128 x i8> @llvm.riscv.mltr.m.nxv128i8(
  <vscale x 128 x i8>*,
  i64
)

declare void @llvm.riscv.mstr.m.nxv128i8(
  <vscale x 128 x i8>,
  <vscale x 128 x i8>*,
  i64
)

define void @intrinsic_mltre_mstre_i8(<vscale x 128 x i8>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mltre_mstre_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mltre8.m tr0, (a0), a1
; CHECK-NEXT:    mstre8.m tr0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 128 x i8> @llvm.riscv.mltr.m.nxv128i8(
    <vscale x 128 x i8>* %0,
    i64 %1
  )

  call void @llvm.riscv.mstr.m.nxv128i8(
    <vscale x 128 x i8> %2,
    <vscale x 128 x i8>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 64 x i16> @llvm.riscv.mltr.m.nxv64i16(
  <vscale x 64 x i16>*,
  i64
)

declare void @llvm.riscv.mstr.m.nxv64i16(
  <vscale x 64 x i16>,
  <vscale x 64 x i16>*,
  i64
)

define void @intrinsic_mltre_mstre_i16(<vscale x 64 x i16>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mltre_mstre_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mltre16.m tr0, (a0), a1
; CHECK-NEXT:    mstre16.m tr0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 64 x i16> @llvm.riscv.mltr.m.nxv64i16(
    <vscale x 64 x i16>* %0,
    i64 %1
  )

  call void @llvm.riscv.mstr.m.nxv64i16(
    <vscale x 64 x i16> %2,
    <vscale x 64 x i16>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 32 x i32> @llvm.riscv.mltr.m.nxv32i32(
  <vscale x 32 x i32>*,
  i64
)

declare void @llvm.riscv.mstr.m.nxv32i32(
  <vscale x 32 x i32>,
  <vscale x 32 x i32>*,
  i64
)

define void @intrinsic_mltre_mstre_i32(<vscale x 32 x i32>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mltre_mstre_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mltre32.m tr0, (a0), a1
; CHECK-NEXT:    mstre32.m tr0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 32 x i32> @llvm.riscv.mltr.m.nxv32i32(
    <vscale x 32 x i32>* %0,
    i64 %1
  )

  call void @llvm.riscv.mstr.m.nxv32i32(
    <vscale x 32 x i32> %2,
    <vscale x 32 x i32>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 16 x i64> @llvm.riscv.mltr.m.nxv16i64(
  <vscale x 16 x i64>*,
  i64
)

declare void @llvm.riscv.mstr.m.nxv16i64(
  <vscale x 16 x i64>,
  <vscale x 16 x i64>*,
  i64
)

define void @intrinsic_mltre_mstre_i64(<vscale x 16 x i64>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mltre_mstre_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mltre64.m tr0, (a0), a1
; CHECK-NEXT:    mstre64.m tr0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 16 x i64> @llvm.riscv.mltr.m.nxv16i64(
    <vscale x 16 x i64>* %0,
    i64 %1
  )

  call void @llvm.riscv.mstr.m.nxv16i64(
    <vscale x 16 x i64> %2,
    <vscale x 16 x i64>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 64 x half> @llvm.riscv.mltr.m.nxv64f16(
  <vscale x 64 x half>*,
  i64
)

declare void @llvm.riscv.mstr.m.nxv64f16(
  <vscale x 64 x half>,
  <vscale x 64 x half>*,
  i64
)

define void @intrinsic_mltre_mstre_f16(<vscale x 64 x half>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mltre_mstre_f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mltre16.m tr0, (a0), a1
; CHECK-NEXT:    mstre16.m tr0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 64 x half> @llvm.riscv.mltr.m.nxv64f16(
    <vscale x 64 x half>* %0,
    i64 %1
  )

  call void @llvm.riscv.mstr.m.nxv64f16(
    <vscale x 64 x half> %2,
    <vscale x 64 x half>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 32 x float> @llvm.riscv.mltr.m.nxv32f32(
  <vscale x 32 x float>*,
  i64
)

declare void @llvm.riscv.mstr.m.nxv32f32(
  <vscale x 32 x float>,
  <vscale x 32 x float>*,
  i64
)

define void @intrinsic_mltre_mstre_f32(<vscale x 32 x float>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mltre_mstre_f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mltre32.m tr0, (a0), a1
; CHECK-NEXT:    mstre32.m tr0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 32 x float> @llvm.riscv.mltr.m.nxv32f32(
    <vscale x 32 x float>* %0,
    i64 %1
  )

  call void @llvm.riscv.mstr.m.nxv32f32(
    <vscale x 32 x float> %2,
    <vscale x 32 x float>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 16 x double> @llvm.riscv.mltr.m.nxv16f64(
  <vscale x 16 x double>*,
  i64
)

declare void @llvm.riscv.mstr.m.nxv16f64(
  <vscale x 16 x double>,
  <vscale x 16 x double>*,
  i64
)

define void @intrinsic_mltre_mstre_f64(<vscale x 16 x double>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mltre_mstre_f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mltre64.m tr0, (a0), a1
; CHECK-NEXT:    mstre64.m tr0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 16 x double> @llvm.riscv.mltr.m.nxv16f64(
    <vscale x 16 x double>* %0,
    i64 %1
  )

  call void @llvm.riscv.mstr.m.nxv16f64(
    <vscale x 16 x double> %2,
    <vscale x 16 x double>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 128 x i8> @llvm.riscv.mlacc.m.nxv128i8(
  <vscale x 128 x i8>*,
  i64
)

declare void @llvm.riscv.msacc.m.nxv128i8(
  <vscale x 128 x i8>,
  <vscale x 128 x i8>*,
  i64
)

define void @intrinsic_mlacce_msacce_i8(<vscale x 128 x i8>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mlacce_msacce_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlacce8.m acc0, (a0), a1
; CHECK-NEXT:    msacce8.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 128 x i8> @llvm.riscv.mlacc.m.nxv128i8(
    <vscale x 128 x i8>* %0,
    i64 %1
  )

  call void @llvm.riscv.msacc.m.nxv128i8(
    <vscale x 128 x i8> %2,
    <vscale x 128 x i8>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 64 x i16> @llvm.riscv.mlacc.m.nxv64i16(
  <vscale x 64 x i16>*,
  i64
)

declare void @llvm.riscv.msacc.m.nxv64i16(
  <vscale x 64 x i16>,
  <vscale x 64 x i16>*,
  i64
)

define void @intrinsic_mlacce_msacce_i16(<vscale x 64 x i16>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mlacce_msacce_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlacce16.m acc0, (a0), a1
; CHECK-NEXT:    msacce16.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 64 x i16> @llvm.riscv.mlacc.m.nxv64i16(
    <vscale x 64 x i16>* %0,
    i64 %1
  )

  call void @llvm.riscv.msacc.m.nxv64i16(
    <vscale x 64 x i16> %2,
    <vscale x 64 x i16>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 32 x i32> @llvm.riscv.mlacc.m.nxv32i32(
  <vscale x 32 x i32>*,
  i64
)

declare void @llvm.riscv.msacc.m.nxv32i32(
  <vscale x 32 x i32>,
  <vscale x 32 x i32>*,
  i64
)

define void @intrinsic_mlacce_msacce_i32(<vscale x 32 x i32>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mlacce_msacce_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlacce32.m acc0, (a0), a1
; CHECK-NEXT:    msacce32.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 32 x i32> @llvm.riscv.mlacc.m.nxv32i32(
    <vscale x 32 x i32>* %0,
    i64 %1
  )

  call void @llvm.riscv.msacc.m.nxv32i32(
    <vscale x 32 x i32> %2,
    <vscale x 32 x i32>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 16 x i64> @llvm.riscv.mlacc.m.nxv16i64(
  <vscale x 16 x i64>*,
  i64
)

declare void @llvm.riscv.msacc.m.nxv16i64(
  <vscale x 16 x i64>,
  <vscale x 16 x i64>*,
  i64
)

define void @intrinsic_mlacce_msacce_i64(<vscale x 16 x i64>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mlacce_msacce_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlacce64.m acc0, (a0), a1
; CHECK-NEXT:    msacce64.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 16 x i64> @llvm.riscv.mlacc.m.nxv16i64(
    <vscale x 16 x i64>* %0,
    i64 %1
  )

  call void @llvm.riscv.msacc.m.nxv16i64(
    <vscale x 16 x i64> %2,
    <vscale x 16 x i64>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 64 x half> @llvm.riscv.mlacc.m.nxv64f16(
  <vscale x 64 x half>*,
  i64
)

declare void @llvm.riscv.msacc.m.nxv64f16(
  <vscale x 64 x half>,
  <vscale x 64 x half>*,
  i64
)

define void @intrinsic_mlacce_msacce_f16(<vscale x 64 x half>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mlacce_msacce_f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlacce16.m acc0, (a0), a1
; CHECK-NEXT:    msacce16.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 64 x half> @llvm.riscv.mlacc.m.nxv64f16(
    <vscale x 64 x half>* %0,
    i64 %1
  )

  call void @llvm.riscv.msacc.m.nxv64f16(
    <vscale x 64 x half> %2,
    <vscale x 64 x half>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 32 x float> @llvm.riscv.mlacc.m.nxv32f32(
  <vscale x 32 x float>*,
  i64
)

declare void @llvm.riscv.msacc.m.nxv32f32(
  <vscale x 32 x float>,
  <vscale x 32 x float>*,
  i64
)

define void @intrinsic_mlacce_msacce_f32(<vscale x 32 x float>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mlacce_msacce_f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlacce32.m acc0, (a0), a1
; CHECK-NEXT:    msacce32.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 32 x float> @llvm.riscv.mlacc.m.nxv32f32(
    <vscale x 32 x float>* %0,
    i64 %1
  )

  call void @llvm.riscv.msacc.m.nxv32f32(
    <vscale x 32 x float> %2,
    <vscale x 32 x float>* %0,
    i64 %1
  )

  ret void
}

declare <vscale x 16 x double> @llvm.riscv.mlacc.m.nxv16f64(
  <vscale x 16 x double>*,
  i64
)

declare void @llvm.riscv.msacc.m.nxv16f64(
  <vscale x 16 x double>,
  <vscale x 16 x double>*,
  i64
)

define void @intrinsic_mlacce_msacce_f64(<vscale x 16 x double>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mlacce_msacce_f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlacce64.m acc0, (a0), a1
; CHECK-NEXT:    msacce64.m acc0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 16 x double> @llvm.riscv.mlacc.m.nxv16f64(
    <vscale x 16 x double>* %0,
    i64 %1
  )

  call void @llvm.riscv.msacc.m.nxv16f64(
    <vscale x 16 x double> %2,
    <vscale x 16 x double>* %0,
    i64 %1
  )

  ret void
}
