; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-matrix -mattr=+experimental-v,+d,+experimental-zfh -target-abi lp64d \
; RUN:   -verify-machineinstrs < %s | FileCheck %s

declare <vscale x 32 x float> @llvm.riscv.mlae.m.nxv2f32(
  <vscale x 32 x float>*,
  i64, i64)

declare void @llvm.riscv.msae.m.nxv2f32(
  <vscale x 32 x float>,
  <vscale x 32 x float>*,
  i64, i64)

declare <vscale x 32 x float> @llvm.riscv.mfmv.s.f.nxv2f32(
  <vscale x 32 x float>,
  float,
  i64
)

define void @intrinsic_mfmv_nxv2f32(<vscale x 32 x float>* %0, <vscale x 32 x float>* %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_mfmv_nxv2f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae32.m tr0, (a0), a2, m1
; CHECK-NEXT:    lui a0, %hi(.LCPI0_0)
; CHECK-NEXT:    flw ft0, %lo(.LCPI0_0)(a0)
; CHECK-NEXT:    mfmv.s.f tr0, ft0, a2
; CHECK-NEXT:    msae32.m tr0, (a1), a2, m1
; CHECK-NEXT:    ret
entry:

  %3 = call <vscale x 32 x float> @llvm.riscv.mlae.m.nxv2f32(<vscale x 32 x float>* %0, i64 %2, i64 0)
  %4 = call <vscale x 32 x float> @llvm.riscv.mfmv.s.f.nxv2f32(<vscale x 32 x float> %3, float 6.0, i64 %2)
  call void @llvm.riscv.msae.m.nxv2f32( <vscale x 32 x float> %4, <vscale x 32 x float>* %1, i64 %2, i64 0)

  ret void
}


declare <vscale x 64 x half> @llvm.riscv.mlae.m.nxv4f16(
  <vscale x 64 x half>*,
  i64, i64)

declare void @llvm.riscv.msae.m.nxv4f16(
  <vscale x 64 x half>,
  <vscale x 64 x half>*,
  i64, i64)

declare <vscale x 64 x half> @llvm.riscv.mfmv.s.f.nxv4f16(
  <vscale x 64 x half>,
  half,
  i64
)

define void @intrinsic_mfmv_nxv4f16(<vscale x 64 x half>* %0, <vscale x 64 x half>* %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_mfmv_nxv4f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae16.m tr0, (a0), a2, m1
; CHECK-NEXT:    lui a0, %hi(.LCPI1_0)
; CHECK-NEXT:    flh ft0, %lo(.LCPI1_0)(a0)
; CHECK-NEXT:    mfmv.s.f tr0, ft0, a2
; CHECK-NEXT:    msae16.m tr0, (a1), a2, m1
; CHECK-NEXT:    ret
entry:

  %3 = call <vscale x 64 x half> @llvm.riscv.mlae.m.nxv4f16(<vscale x 64 x half>* %0, i64 %2, i64 0)
  %4 = call <vscale x 64 x half> @llvm.riscv.mfmv.s.f.nxv4f16(<vscale x 64 x half> %3, half 6.0, i64 %2)
  call void @llvm.riscv.msae.m.nxv4f16( <vscale x 64 x half> %4, <vscale x 64 x half>* %1, i64 %2, i64 0)

  ret void
}

declare <vscale x 16 x double> @llvm.riscv.mlae.m.nxv1f64(
  <vscale x 16 x double>*,
  i64, i64)

declare void @llvm.riscv.msae.m.nxv1f64(
  <vscale x 16 x double>,
  <vscale x 16 x double>*,
  i64, i64)

declare <vscale x 16 x double> @llvm.riscv.mfmv.s.f.nxv1f64(
  <vscale x 16 x double>,
  double,
  i64
)

define void @intrinsic_mfmv_nxv1f64(<vscale x 16 x double>* %0, <vscale x 16 x double>* %1, i64 %2) nounwind {
; CHECK-LABEL: intrinsic_mfmv_nxv1f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae64.m tr0, (a0), a2, m1
; CHECK-NEXT:    lui a0, %hi(.LCPI2_0)
; CHECK-NEXT:    fld ft0, %lo(.LCPI2_0)(a0)
; CHECK-NEXT:    mfmv.s.f tr0, ft0, a2
; CHECK-NEXT:    msae64.m tr0, (a1), a2, m1
; CHECK-NEXT:    ret
entry:

  %3 = call <vscale x 16 x double> @llvm.riscv.mlae.m.nxv1f64(<vscale x 16 x double>* %0, i64 %2, i64 0)
  %4 = call <vscale x 16 x double> @llvm.riscv.mfmv.s.f.nxv1f64(<vscale x 16 x double> %3, double 6.0, i64 %2)
  call void @llvm.riscv.msae.m.nxv1f64( <vscale x 16 x double> %4, <vscale x 16 x double>* %1, i64 %2, i64 0)

  ret void
}
