; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-matrix -mattr=+experimental-v,+d,+experimental-zfh \
; RUN:   -verify-machineinstrs < %s | FileCheck %s

declare <vscale x 128 x i8> @llvm.riscv.mlct.m.nxv128i8(
  <vscale x 128 x i8>*,
  i64)

declare void @llvm.riscv.msct.m.nxv128i8(
  <vscale x 128 x i8>,
  <vscale x 128 x i8>*,
  i64)

declare <vscale x 64 x i16> @llvm.riscv.mlct.m.nxv64i16(
  <vscale x 64 x i16>*,
  i64)

declare void @llvm.riscv.msct.m.nxv64i16(
  <vscale x 64 x i16>,
  <vscale x 64 x i16>*,
  i64)

declare <vscale x 32 x i32> @llvm.riscv.mlct.m.nxv32i32(
  <vscale x 32 x i32>*,
  i64)

declare void @llvm.riscv.msct.m.nxv32i32(
  <vscale x 32 x i32>,
  <vscale x 32 x i32>*,
  i64)

declare <vscale x 16 x i64> @llvm.riscv.mlct.m.nxv16i64(
  <vscale x 16 x i64>*,
  i64)

declare void @llvm.riscv.msct.m.nxv16i64(
  <vscale x 16 x i64>,
  <vscale x 16 x i64>*,
  i64)

declare <vscale x 64 x half> @llvm.riscv.mlct.m.nxv64f16(
  <vscale x 64 x half>*,
  i64)

declare void @llvm.riscv.msct.m.nxv64f16(
  <vscale x 64 x half>,
  <vscale x 64 x half>*,
  i64)

declare <vscale x 32 x float> @llvm.riscv.mlct.m.nxv32f32(
  <vscale x 32 x float>*,
  i64)

declare void @llvm.riscv.msct.m.nxv32f32(
  <vscale x 32 x float>,
  <vscale x 32 x float>*,
  i64)

declare <vscale x 16 x double> @llvm.riscv.mlct.m.nxv16f64(
  <vscale x 16 x double>*,
  i64)

declare void @llvm.riscv.msct.m.nxv16f64(
  <vscale x 16 x double>,
  <vscale x 16 x double>*,
  i64)

define void @intrinsic_mlcte_mscte_i(<vscale x 128 x i8>* %0, <vscale x 64 x i16>* %1, <vscale x 32 x i32>* %2, <vscale x 16 x i64>* %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_mlcte_mscte_i:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlcte8.m acc0, (a0), a4
; CHECK-NEXT:    mlcte16.m acc1, (a1), a4
; CHECK-NEXT:    mlcte32.m acc2, (a2), a4
; CHECK-NEXT:    mlcte64.m acc3, (a3), a4
; CHECK-NEXT:    mscte8.m acc0, (a0), a4
; CHECK-NEXT:    mscte16.m acc1, (a1), a4
; CHECK-NEXT:    mscte32.m acc2, (a2), a4
; CHECK-NEXT:    mscte64.m acc3, (a3), a4
; CHECK-NEXT:    ret
entry:

  %5 = call <vscale x 128 x i8> @llvm.riscv.mlct.m.nxv128i8(
    <vscale x 128 x i8>* %0,
    i64 %4)

  %6 = call <vscale x 64 x i16> @llvm.riscv.mlct.m.nxv64i16(
    <vscale x 64 x i16>* %1,
    i64 %4)

  %7 = call <vscale x 32 x i32> @llvm.riscv.mlct.m.nxv32i32(
    <vscale x 32 x i32>* %2,
    i64 %4)

  %8 = call <vscale x 16 x i64> @llvm.riscv.mlct.m.nxv16i64(
    <vscale x 16 x i64>* %3,
    i64 %4)

  call void @llvm.riscv.msct.m.nxv128i8(
    <vscale x 128 x i8> %5,
    <vscale x 128 x i8>* %0,
    i64 %4)

  call void @llvm.riscv.msct.m.nxv64i16(
    <vscale x 64 x i16> %6,
    <vscale x 64 x i16>* %1,
    i64 %4)

  call void @llvm.riscv.msct.m.nxv32i32(
    <vscale x 32 x i32> %7,
    <vscale x 32 x i32>* %2,
    i64 %4)

  call void @llvm.riscv.msct.m.nxv16i64(
    <vscale x 16 x i64> %8,
    <vscale x 16 x i64>* %3,
    i64 %4)

  ret void
}

define void @intrinsic_mlcte_mscte_f(<vscale x 64 x half>* %0, <vscale x 32 x float>* %1, <vscale x 16 x double>* %2) nounwind {
; CHECK-LABEL: intrinsic_mlcte_mscte_f:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a3, zero, 1
; CHECK-NEXT:    mlcte16.m acc0, (a0), a3
; CHECK-NEXT:    mlcte32.m acc1, (a1), a3
; CHECK-NEXT:    mlcte64.m acc2, (a2), a3
; CHECK-NEXT:    mscte16.m acc0, (a0), a3
; CHECK-NEXT:    mscte32.m acc1, (a1), a3
; CHECK-NEXT:    mscte64.m acc2, (a2), a3
; CHECK-NEXT:    ret

entry:

  %3 = call <vscale x 64 x half> @llvm.riscv.mlct.m.nxv64f16(
    <vscale x 64 x half>* %0,
    i64 1)

  %4 = call <vscale x 32 x float> @llvm.riscv.mlct.m.nxv32f32(
    <vscale x 32 x float>* %1,
    i64 1)

  %5 = call <vscale x 16 x double> @llvm.riscv.mlct.m.nxv16f64(
    <vscale x 16 x double>* %2,
    i64 1)

  call void @llvm.riscv.msct.m.nxv64f16(
    <vscale x 64 x half> %3,
    <vscale x 64 x half>* %0,
    i64 1)

  call void @llvm.riscv.msct.m.nxv32f32(
    <vscale x 32 x float> %4,
    <vscale x 32 x float>* %1,
    i64 1)

  call void @llvm.riscv.msct.m.nxv16f64(
    <vscale x 16 x double> %5,
    <vscale x 16 x double>* %2,
    i64 1)

  ret void
}
