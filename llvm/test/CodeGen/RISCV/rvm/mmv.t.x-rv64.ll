; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-matrix -mattr=+experimental-v,+d,+experimental-zfh -target-abi lp64d \
; RUN:   -verify-machineinstrs < %s | FileCheck %s
declare <vscale x 128 x i8> @llvm.riscv.mla.m.nxv128i8(
  <vscale x 128 x i8>*,
  i64)

declare void @llvm.riscv.msa.m.nxv128i8(
  <vscale x 128 x i8>,
  <vscale x 128 x i8>*,
  i64)

declare <vscale x 64 x i16> @llvm.riscv.mla.m.nxv64i16(
  <vscale x 64 x i16>*,
  i64)

declare void @llvm.riscv.msa.m.nxv64i16(
  <vscale x 64 x i16>,
  <vscale x 64 x i16>*,
  i64)

declare <vscale x 32 x i32> @llvm.riscv.mla.m.nxv32i32(
  <vscale x 32 x i32>*,
  i64)

declare void @llvm.riscv.msa.m.nxv32i32(
  <vscale x 32 x i32>,
  <vscale x 32 x i32>*,
  i64)

declare <vscale x 16 x i64> @llvm.riscv.mla.m.nxv16i64(
  <vscale x 16 x i64>*,
  i64)

declare void @llvm.riscv.msa.m.nxv16i64(
  <vscale x 16 x i64>,
  <vscale x 16 x i64>*,
  i64)

declare <vscale x 128 x i8> @llvm.riscv.mmv.t.x.nxv8i8(
  <vscale x 128 x i8>,
  i8,
  i64
)

define void @intrinsic_mmv_nxv8i8(<vscale x 128 x i8>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mmv_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae8.m tr0, (a0), a1
; CHECK-NEXT:    addi a2, zero, 5
; CHECK-NEXT:    mmve8.t.x tr0, a2, a1
; CHECK-NEXT:    msae8.m tr0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 128 x i8> @llvm.riscv.mla.m.nxv128i8(
    <vscale x 128 x i8>* %0,
    i64 %1)
  %3 = call <vscale x 128 x i8> @llvm.riscv.mmv.t.x.nxv8i8(<vscale x 128 x i8> %2, i8 5, i64 %1)
  call void @llvm.riscv.msa.m.nxv128i8(<vscale x 128 x i8> %3, <vscale x 128 x i8>* %0, i64 %1)

  ret void
}


declare <vscale x 64 x i16> @llvm.riscv.mmv.t.x.nxv4i16(
  <vscale x 64 x i16>,
  i16,
  i64
)

define void @intrinsic_mmv_nxv4i16(<vscale x 64 x i16>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mmv_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae16.m tr0, (a0), a1
; CHECK-NEXT:    addi a2, zero, 5
; CHECK-NEXT:    mmve16.t.x tr0, a2, a1
; CHECK-NEXT:    msae16.m tr0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 64 x i16> @llvm.riscv.mla.m.nxv64i16(
    <vscale x 64 x i16>* %0,
    i64 %1)
  %3 = call <vscale x 64 x i16> @llvm.riscv.mmv.t.x.nxv4i16(<vscale x 64 x i16> %2, i16 5, i64 %1)
  call void @llvm.riscv.msa.m.nxv64i16(<vscale x 64 x i16> %3, <vscale x 64 x i16>* %0, i64 %1)

  ret void
}

declare <vscale x 32 x i32> @llvm.riscv.mmv.t.x.nxv2i32(
  <vscale x 32 x i32>,
  i32,
  i64
)

define void @intrinsic_mmv_nxv2i32(<vscale x 32 x i32>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mmv_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae32.m tr0, (a0), a1
; CHECK-NEXT:    addi a2, zero, 5
; CHECK-NEXT:    mmve32.t.x tr0, a2, a1
; CHECK-NEXT:    msae32.m tr0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 32 x i32> @llvm.riscv.mla.m.nxv32i32(
    <vscale x 32 x i32>* %0,
    i64 %1)
  %3 = call <vscale x 32 x i32> @llvm.riscv.mmv.t.x.nxv2i32(<vscale x 32 x i32> %2, i32 5, i64 %1)
  call void @llvm.riscv.msa.m.nxv32i32(<vscale x 32 x i32> %3, <vscale x 32 x i32>* %0, i64 %1)

  ret void
}

declare <vscale x 16 x i64> @llvm.riscv.mmv.t.x.nxv1i64(
  <vscale x 16 x i64>,
  i64,
  i64
)

define void @intrinsic_mmv_nxv1i64(<vscale x 16 x i64>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mmv_nxv1i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae64.m tr0, (a0), a1
; CHECK-NEXT:    addi a2, zero, 5
; CHECK-NEXT:    mmve64.t.x tr0, a2, a1
; CHECK-NEXT:    msae64.m tr0, (a0), a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 16 x i64> @llvm.riscv.mla.m.nxv16i64(
    <vscale x 16 x i64>* %0,
    i64 %1)
  %3 = call <vscale x 16 x i64> @llvm.riscv.mmv.t.x.nxv1i64(<vscale x 16 x i64> %2, i64 5, i64 %1)
  call void @llvm.riscv.msa.m.nxv16i64(<vscale x 16 x i64> %3, <vscale x 16 x i64>* %0, i64 %1)

  ret void
}
