; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-matrix -mattr=+experimental-v,+d,+experimental-zfh \
; RUN:   -verify-machineinstrs < %s | FileCheck %s

declare <vscale x 64 x half> @llvm.riscv.mlae.m.nxv4f16(
  <vscale x 64 x half>*,
  i64, i64)

declare void @llvm.riscv.msae.m.nxv4f16(
  <vscale x 64 x half>,
  <vscale x 64 x half>*,
  i64, i64)

declare <vscale x 32 x float> @llvm.riscv.mlae.m.nxv2f32(
  <vscale x 32 x float>*,
  i64, i64)

declare void @llvm.riscv.msae.m.nxv2f32(
  <vscale x 32 x float>,
  <vscale x 32 x float>*,
  i64, i64)

declare <vscale x 16 x double> @llvm.riscv.mlae.m.nxv1f64(
  <vscale x 16 x double>*,
  i64, i64)

declare void @llvm.riscv.msae.m.nxv1f64(
  <vscale x 16 x double>,
  <vscale x 16 x double>*,
  i64, i64)

declare <vscale x 64 x half> @llvm.riscv.mfma.mm.nxv4f16(
  <vscale x 64 x half>,
  <vscale x 64 x half>,
  <vscale x 64 x half>)

declare <vscale x 32 x float> @llvm.riscv.mfma.mm.nxv2f32(
  <vscale x 32 x float>,
  <vscale x 32 x float>,
  <vscale x 32 x float>)

declare <vscale x 16 x double> @llvm.riscv.mfma.mm.nxv1f64(
  <vscale x 16 x double>,
  <vscale x 16 x double>,
  <vscale x 16 x double>)

define void @intrinsic_mlaef16_mfma_mm_msaef16(<vscale x 64 x half>* %0, <vscale x 64 x half>* %1, i64 %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_mlaef16_mfma_mm_msaef16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae16.m tr0, (a0), a2, m1
; CHECK-NEXT:    mlae16.m tr1, (a1), a2, m1
; CHECK-NEXT:    mfma.mm tr0, tr0, tr1
; CHECK-NEXT:    msae16.m tr0, (a0), a2, m1
; CHECK-NEXT:    ret
entry:

  %4 = call <vscale x 64 x half> @llvm.riscv.mlae.m.nxv4f16(
    <vscale x 64 x half>* %0,
    i64 %2, i64 0)

  %5 = call <vscale x 64 x half> @llvm.riscv.mlae.m.nxv4f16(
    <vscale x 64 x half>* %1,
    i64 %2, i64 0)

  %6 = call <vscale x 64 x half> @llvm.riscv.mfma.mm.nxv4f16(
    <vscale x 64 x half> %4,
    <vscale x 64 x half> %4,
    <vscale x 64 x half> %5)

  call void @llvm.riscv.msae.m.nxv4f16(
    <vscale x 64 x half> %6,
    <vscale x 64 x half>* %0,
    i64 %2, i64 0)

  ret void
}

define void @intrinsic_mlaef32_mfma_mm_msaef32(<vscale x 32 x float>* %0, <vscale x 32 x float>* %1, i64 %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_mlaef32_mfma_mm_msaef32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae32.m tr0, (a0), a2, m1
; CHECK-NEXT:    mlae32.m tr1, (a1), a2, m1
; CHECK-NEXT:    mfma.mm tr0, tr0, tr1
; CHECK-NEXT:    msae32.m tr0, (a0), a2, m1
; CHECK-NEXT:    ret
entry:

  %4 = call <vscale x 32 x float> @llvm.riscv.mlae.m.nxv2f32(
    <vscale x 32 x float>* %0,
    i64 %2, i64 0)

  %5 = call <vscale x 32 x float> @llvm.riscv.mlae.m.nxv2f32(
    <vscale x 32 x float>* %1,
    i64 %2, i64 0)

  %6 = call <vscale x 32 x float> @llvm.riscv.mfma.mm.nxv2f32(
    <vscale x 32 x float> %4,
    <vscale x 32 x float> %4,
    <vscale x 32 x float> %5)

  call void @llvm.riscv.msae.m.nxv2f32(
    <vscale x 32 x float> %6,
    <vscale x 32 x float>* %0,
    i64 %2, i64 0)

  ret void
}

define void @intrinsic_mlaef64_mfma_mm_msaef64(<vscale x 16 x double>* %0, <vscale x 16 x double>* %1, i64 %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_mlaef64_mfma_mm_msaef64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae64.m tr0, (a0), a2, m1
; CHECK-NEXT:    mlae64.m tr1, (a1), a2, m1
; CHECK-NEXT:    mfma.mm tr0, tr0, tr1
; CHECK-NEXT:    msae64.m tr0, (a0), a2, m1
; CHECK-NEXT:    ret
entry:

  %4 = call <vscale x 16 x double> @llvm.riscv.mlae.m.nxv1f64(
    <vscale x 16 x double>* %0,
    i64 %2, i64 0)

  %5 = call <vscale x 16 x double> @llvm.riscv.mlae.m.nxv1f64(
    <vscale x 16 x double>* %1,
    i64 %2, i64 0)

  %6 = call <vscale x 16 x double> @llvm.riscv.mfma.mm.nxv1f64(
    <vscale x 16 x double> %4,
    <vscale x 16 x double> %4,
    <vscale x 16 x double> %5)

  call void @llvm.riscv.msae.m.nxv1f64(
    <vscale x 16 x double> %6,
    <vscale x 16 x double>* %0,
    i64 %2, i64 0)

  ret void
}

; m2

declare <vscale x 128 x half> @llvm.riscv.mlae.m.nxv8f16(
  <vscale x 128 x half>*,
  i64, i64)

declare void @llvm.riscv.msae.m.nxv8f16(
  <vscale x 128 x half>,
  <vscale x 128 x half>*,
  i64, i64)

declare <vscale x 128 x half> @llvm.riscv.mfma.mm.nxv8f16(
  <vscale x 128 x half>,
  <vscale x 128 x half>,
  <vscale x 128 x half>)

define void @intrinsic_mlaef16_mfma_mm_msaef16_m2(<vscale x 128 x half>* %0, <vscale x 128 x half>* %1, i64 %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_mlaef16_mfma_mm_msaef16_m2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae16.m tr0, (a0), a2, m2
; CHECK-NEXT:    mlae16.m tr2, (a1), a2, m2
; CHECK-NEXT:    mfma.mm tr0, tr0, tr2
; CHECK-NEXT:    msae16.m tr0, (a0), a2, m2
; CHECK-NEXT:    ret
entry:

  %4 = call <vscale x 128 x half> @llvm.riscv.mlae.m.nxv8f16(
    <vscale x 128 x half>* %0,
    i64 %2, i64 1)

  %5 = call <vscale x 128 x half> @llvm.riscv.mlae.m.nxv8f16(
    <vscale x 128 x half>* %1,
    i64 %2, i64 1)

  %6 = call <vscale x 128 x half> @llvm.riscv.mfma.mm.nxv8f16(
    <vscale x 128 x half> %4,
    <vscale x 128 x half> %4,
    <vscale x 128 x half> %5)

  call void @llvm.riscv.msae.m.nxv8f16(
    <vscale x 128 x half> %6,
    <vscale x 128 x half>* %0,
    i64 %2, i64 1)

  ret void
}

; m4

declare <vscale x 256 x half> @llvm.riscv.mlae.m.nxv16f16(
  <vscale x 256 x half>*,
  i64, i64)

declare void @llvm.riscv.msae.m.nxv16f16(
  <vscale x 256 x half>,
  <vscale x 256 x half>*,
  i64, i64)

declare <vscale x 256 x half> @llvm.riscv.mfma.mm.nxv16f16(
  <vscale x 256 x half>,
  <vscale x 256 x half>,
  <vscale x 256 x half>)

define void @intrinsic_mlaef16_mfma_mm_msaef16_m4(<vscale x 256 x half>* %0, <vscale x 256 x half>* %1, i64 %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_mlaef16_mfma_mm_msaef16_m4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae16.m tr0, (a0), a2, m4
; CHECK-NEXT:    mlae16.m tr4, (a1), a2, m4
; CHECK-NEXT:    mfma.mm tr0, tr0, tr4
; CHECK-NEXT:    msae16.m tr0, (a0), a2, m4
; CHECK-NEXT:    ret
entry:

  %4 = call <vscale x 256 x half> @llvm.riscv.mlae.m.nxv16f16(
    <vscale x 256 x half>* %0,
    i64 %2, i64 2)

  %5 = call <vscale x 256 x half> @llvm.riscv.mlae.m.nxv16f16(
    <vscale x 256 x half>* %1,
    i64 %2, i64 2)

  %6 = call <vscale x 256 x half> @llvm.riscv.mfma.mm.nxv16f16(
    <vscale x 256 x half> %4,
    <vscale x 256 x half> %4,
    <vscale x 256 x half> %5)

  call void @llvm.riscv.msae.m.nxv16f16(
    <vscale x 256 x half> %6,
    <vscale x 256 x half>* %0,
    i64 %2, i64 2)

  ret void
}
