; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-matrix -mattr=+experimental-v,+d,+experimental-zfh -target-abi lp64d \
; RUN:   -verify-machineinstrs < %s | FileCheck %s
declare <vscale x 128 x i8> @llvm.riscv.mla.m.nxv128i8(
  <vscale x 128 x i8>*,
  i64)

declare void @llvm.riscv.msa.m.nxv128i8(
  <vscale x 128 x i8>,
  <vscale x 128 x i8>*,
  i64)

declare <vscale x 64 x i16> @llvm.riscv.mla.m.nxv64i16(
  <vscale x 64 x i16>*,
  i64)

declare void @llvm.riscv.msa.m.nxv64i16(
  <vscale x 64 x i16>,
  <vscale x 64 x i16>*,
  i64)

declare <vscale x 32 x i32> @llvm.riscv.mla.m.nxv32i32(
  <vscale x 32 x i32>*,
  i64)

declare void @llvm.riscv.msa.m.nxv32i32(
  <vscale x 32 x i32>,
  <vscale x 32 x i32>*,
  i64)

declare <vscale x 16 x i64> @llvm.riscv.mla.m.nxv16i64(
  <vscale x 16 x i64>*,
  i64)

declare void @llvm.riscv.msa.m.nxv16i64(
  <vscale x 16 x i64>,
  <vscale x 16 x i64>*,
  i64)

declare i8 @llvm.riscv.mmv.x.t.nxv128i8(
  <vscale x 128 x i8>,
  i64)

define signext i8 @intrinsic_mmv_nxv128i8(<vscale x 128 x i8>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mmv_nxv128i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae8.m tr0, (a0), a1
; CHECK-NEXT:    mmve8.x.t a0, tr0, a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 128 x i8> @llvm.riscv.mla.m.nxv128i8(
    <vscale x 128 x i8>* %0,
    i64 %1)

  %3 = call i8 @llvm.riscv.mmv.x.t.nxv128i8(<vscale x 128 x i8> %2, i64 %1)

  ret i8 %3
}

declare i16 @llvm.riscv.mmv.x.t.nxv64i16(
  <vscale x 64 x i16>,
  i64)

define signext i16 @intrinsic_mmv_nxv64i16(<vscale x 64 x i16>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mmv_nxv64i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae16.m tr0, (a0), a1
; CHECK-NEXT:    mmve16.x.t a0, tr0, a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 64 x i16> @llvm.riscv.mla.m.nxv64i16(
    <vscale x 64 x i16>* %0,
    i64 %1)

  %3 = call i16 @llvm.riscv.mmv.x.t.nxv64i16(<vscale x 64 x i16> %2, i64 %1)

  ret i16 %3
}

declare i32 @llvm.riscv.mmv.x.t.nxv32i32(
  <vscale x 32 x i32>,
  i64)

define signext i32 @intrinsic_mmv_x_s_nxv32i32(<vscale x 32 x i32>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mmv_x_s_nxv32i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae32.m tr0, (a0), a1
; CHECK-NEXT:    mmve32.x.t a0, tr0, a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 32 x i32> @llvm.riscv.mla.m.nxv32i32(
    <vscale x 32 x i32>* %0,
    i64 %1)

  %3 = call i32 @llvm.riscv.mmv.x.t.nxv32i32(<vscale x 32 x i32> %2, i64 %1)

  ret i32 %3
}

declare i64 @llvm.riscv.mmv.x.t.nxv16i64(
  <vscale x 16 x i64>,
  i64)

define i64 @intrinsic_mmv_x_s_nxv16i64(<vscale x 16 x i64>* %0, i64 %1) nounwind {
; CHECK-LABEL: intrinsic_mmv_x_s_nxv16i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae64.m tr0, (a0), a1
; CHECK-NEXT:    mmve64.x.t a0, tr0, a1
; CHECK-NEXT:    ret
entry:
  %2 = call <vscale x 16 x i64> @llvm.riscv.mla.m.nxv16i64(
    <vscale x 16 x i64>* %0,
    i64 %1)

  %3 = call i64 @llvm.riscv.mmv.x.t.nxv16i64(<vscale x 16 x i64> %2, i64 %1)

  ret i64 %3
}
