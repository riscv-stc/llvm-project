; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-matrix -mattr=+experimental-v,+d,+experimental-zfh \
; RUN:   -verify-machineinstrs < %s | FileCheck %s

declare <vscale x 64 x half> @llvm.riscv.mla.m.nxv64f16(
  <vscale x 64 x half>*,
  i64)

declare <vscale x 64 x half> @llvm.riscv.mlb.m.nxv64f16(
  <vscale x 64 x half>*,
  i64)

declare <vscale x 32 x float> @llvm.riscv.mlc.m.nxv32f32(
  <vscale x 32 x float>*,
  i64)

declare void @llvm.riscv.msc.m.nxv32f32(
  <vscale x 32 x float>,
  <vscale x 32 x float>*,
  i64)

declare <vscale x 32 x float> @llvm.riscv.mfwma.spb.mm.nxv32f32.nxv32f32.nxv64f16.nxv64f16(
  <vscale x 32 x float>,
  <vscale x 64 x half>,
  <vscale x 64 x half>
)

define void @intrinsic_mfwma_spb_mm_nxv32f32_nxv32f32_nxv64f16_nxv64f16(<vscale x 32 x float>* %0, <vscale x 64 x half>* %1, <vscale x 64 x half>* %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_mfwma_spb_mm_nxv32f32_nxv32f32_nxv64f16_nxv64f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce32.m acc0, (a0), a3
; CHECK-NEXT:    mlae16.m tr0, (a1), a3
; CHECK-NEXT:    mlbe16.m tr1, (a2), a3
; CHECK-NEXT:    mfwma.spb.mm acc0, tr0, tr1
; CHECK-NEXT:    msce32.m acc0, (a0), a3
; CHECK-NEXT:    ret
entry:
  %4 = call <vscale x 32 x float> @llvm.riscv.mlc.m.nxv32f32(
    <vscale x 32 x float>* %0,
    i64 %3)

  %5 = call <vscale x 64 x half> @llvm.riscv.mla.m.nxv64f16(
    <vscale x 64 x half>* %1,
    i64 %3)

  %6 = call <vscale x 64 x half> @llvm.riscv.mlb.m.nxv64f16(
    <vscale x 64 x half>* %2,
    i64 %3)

  %7 = call <vscale x 32 x float> @llvm.riscv.mfwma.spb.mm.nxv32f32.nxv32f32.nxv64f16.nxv64f16(
    <vscale x 32 x float> %4,
    <vscale x 64 x half> %5,
    <vscale x 64 x half> %6)

  call void @llvm.riscv.msc.m.nxv32f32(
    <vscale x 32 x float> %7,
    <vscale x 32 x float>* %0,
    i64 %3)

  ret void
}

declare <vscale x 32 x float> @llvm.riscv.mfwma.spb.hf.mm.nxv32f32.nxv32f32.nxv64f16.nxv64f16(
  <vscale x 32 x float>,
  <vscale x 64 x half>,
  <vscale x 64 x half>
)

define void @intrinsic_mfwma_spb_hf_mm_nxv32f32_nxv32f32_nxv64f16_nxv64f16(<vscale x 32 x float>* %0, <vscale x 64 x half>* %1, <vscale x 64 x half>* %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_mfwma_spb_hf_mm_nxv32f32_nxv32f32_nxv64f16_nxv64f16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce32.m acc0, (a0), a3
; CHECK-NEXT:    mlae16.m tr0, (a1), a3
; CHECK-NEXT:    mlbe16.m tr1, (a2), a3
; CHECK-NEXT:    mfwma.spb.hf.mm acc0, tr0, tr1
; CHECK-NEXT:    msce32.m acc0, (a0), a3
; CHECK-NEXT:    ret
entry:
  %4 = call <vscale x 32 x float> @llvm.riscv.mlc.m.nxv32f32(
    <vscale x 32 x float>* %0,
    i64 %3)

  %5 = call <vscale x 64 x half> @llvm.riscv.mla.m.nxv64f16(
    <vscale x 64 x half>* %1,
    i64 %3)

  %6 = call <vscale x 64 x half> @llvm.riscv.mlb.m.nxv64f16(
    <vscale x 64 x half>* %2,
    i64 %3)

  %7 = call <vscale x 32 x float> @llvm.riscv.mfwma.spb.hf.mm.nxv32f32.nxv32f32.nxv64f16.nxv64f16(
    <vscale x 32 x float> %4,
    <vscale x 64 x half> %5,
    <vscale x 64 x half> %6)

  call void @llvm.riscv.msc.m.nxv32f32(
    <vscale x 32 x float> %7,
    <vscale x 32 x float>* %0,
    i64 %3)

  ret void
}

declare <vscale x 32 x float> @llvm.riscv.mla.m.nxv16f64(
  <vscale x 32 x float>*,
  i64)

declare <vscale x 32 x float> @llvm.riscv.mlb.m.nxv16f64(
  <vscale x 32 x float>*,
  i64)

declare <vscale x 16 x double> @llvm.riscv.mlc.m.nxv16f64(
  <vscale x 16 x double>*,
  i64)

declare void @llvm.riscv.msc.m.nxv16f64(
  <vscale x 16 x double>,
  <vscale x 16 x double>*,
  i64)

declare <vscale x 16 x double> @llvm.riscv.mfwma.spb.mm.nxv16f64.nxv16f64.nxv16f64.nxv16f64(
  <vscale x 16 x double>,
  <vscale x 32 x float>,
  <vscale x 32 x float>
)

define void @intrinsic_mfwma_spb_mm_nxv16f64_nxv16f64_nxv16f64_nxv16f64(<vscale x 16 x double>* %0, <vscale x 32 x float>* %1, <vscale x 32 x float>* %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_mfwma_spb_mm_nxv16f64_nxv16f64_nxv16f64_nxv16f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce64.m acc0, (a0), a3
; CHECK-NEXT:    mlae32.m tr0, (a1), a3
; CHECK-NEXT:    mlbe32.m tr1, (a2), a3
; CHECK-NEXT:    mfwma.spb.mm acc0, tr0, tr1
; CHECK-NEXT:    msce64.m acc0, (a0), a3
; CHECK-NEXT:    ret
entry:
  %4 = call <vscale x 16 x double> @llvm.riscv.mlc.m.nxv16f64(
    <vscale x 16 x double>* %0,
    i64 %3)

  %5 = call <vscale x 32 x float> @llvm.riscv.mla.m.nxv16f64(
    <vscale x 32 x float>* %1,
    i64 %3)

  %6 = call <vscale x 32 x float> @llvm.riscv.mlb.m.nxv16f64(
    <vscale x 32 x float>* %2,
    i64 %3)

  %7 = call <vscale x 16 x double> @llvm.riscv.mfwma.spb.mm.nxv16f64.nxv16f64.nxv16f64.nxv16f64(
    <vscale x 16 x double> %4,
    <vscale x 32 x float> %5,
    <vscale x 32 x float> %6)

  call void @llvm.riscv.msc.m.nxv16f64(
    <vscale x 16 x double> %7,
    <vscale x 16 x double>* %0,
    i64 %3)

  ret void
}

declare <vscale x 16 x double> @llvm.riscv.mfwma.spb.f.mm.nxv16f64.nxv16f64.nxv16f64.nxv16f64(
  <vscale x 16 x double>,
  <vscale x 32 x float>,
  <vscale x 32 x float>
)

define void @intrinsic_mfwma_spb_f_mm_nxv16f64_nxv16f64_nxv16f64_nxv16f64(<vscale x 16 x double>* %0, <vscale x 32 x float>* %1, <vscale x 32 x float>* %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_mfwma_spb_f_mm_nxv16f64_nxv16f64_nxv16f64_nxv16f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlce64.m acc0, (a0), a3
; CHECK-NEXT:    mlae32.m tr0, (a1), a3
; CHECK-NEXT:    mlbe32.m tr1, (a2), a3
; CHECK-NEXT:    mfwma.spb.f.mm acc0, tr0, tr1
; CHECK-NEXT:    msce64.m acc0, (a0), a3
; CHECK-NEXT:    ret
entry:
  %4 = call <vscale x 16 x double> @llvm.riscv.mlc.m.nxv16f64(
    <vscale x 16 x double>* %0,
    i64 %3)

  %5 = call <vscale x 32 x float> @llvm.riscv.mla.m.nxv16f64(
    <vscale x 32 x float>* %1,
    i64 %3)

  %6 = call <vscale x 32 x float> @llvm.riscv.mlb.m.nxv16f64(
    <vscale x 32 x float>* %2,
    i64 %3)

  %7 = call <vscale x 16 x double> @llvm.riscv.mfwma.spb.f.mm.nxv16f64.nxv16f64.nxv16f64.nxv16f64(
    <vscale x 16 x double> %4,
    <vscale x 32 x float> %5,
    <vscale x 32 x float> %6)

  call void @llvm.riscv.msc.m.nxv16f64(
    <vscale x 16 x double> %7,
    <vscale x 16 x double>* %0,
    i64 %3)

  ret void
}
