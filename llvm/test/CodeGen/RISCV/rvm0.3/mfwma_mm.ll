; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-matrix -mattr=+experimental-v,+d,+experimental-zfh \
; RUN:   -verify-machineinstrs < %s | FileCheck %s

declare <vscale x 128 x i8> @llvm.riscv.mla.m.nxv8i8(
  <vscale x 128 x i8>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv8i8(
  <vscale x 128 x i8>,
  <vscale x 128 x i8>*,
  i64, i64)

declare <vscale x 64 x i16> @llvm.riscv.mla.m.nxv4i16(
  <vscale x 64 x i16>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv4i16(
  <vscale x 64 x i16>,
  <vscale x 64 x i16>*,
  i64, i64)

declare <vscale x 32 x i32> @llvm.riscv.mla.m.nxv2i32(
  <vscale x 32 x i32>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv2i32(
  <vscale x 32 x i32>,
  <vscale x 32 x i32>*,
  i64, i64)

declare <vscale x 16 x i64> @llvm.riscv.mla.m.nxv1i64(
  <vscale x 16 x i64>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv1i64(
  <vscale x 16 x i64>,
  <vscale x 16 x i64>*,
  i64, i64)



declare <vscale x 256 x i8> @llvm.riscv.mla.m.nxv16i8(
  <vscale x 256 x i8>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv16i8(
  <vscale x 256 x i8>,
  <vscale x 256 x i8>*,
  i64, i64)

declare <vscale x 128 x i16> @llvm.riscv.mla.m.nxv8i16(
  <vscale x 128 x i16>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv8i16(
  <vscale x 128 x i16>,
  <vscale x 128 x i16>*,
  i64, i64)

declare <vscale x 64 x i32> @llvm.riscv.mla.m.nxv4i32(
  <vscale x 64 x i32>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv4i32(
  <vscale x 64 x i32>,
  <vscale x 64 x i32>*,
  i64, i64)

declare <vscale x 32 x i64> @llvm.riscv.mla.m.nxv2i64(
  <vscale x 32 x i64>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv2i64(
  <vscale x 32 x i64>,
  <vscale x 32 x i64>*,
  i64, i64)



declare <vscale x 512 x i8> @llvm.riscv.mla.m.nxv32i8(
  <vscale x 512 x i8>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv32i8(
  <vscale x 512 x i8>,
  <vscale x 512 x i8>*,
  i64, i64)

declare <vscale x 256 x i16> @llvm.riscv.mla.m.nxv16i16(
  <vscale x 256 x i16>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv16i16(
  <vscale x 256 x i16>,
  <vscale x 256 x i16>*,
  i64, i64)

declare <vscale x 128 x i32> @llvm.riscv.mla.m.nxv8i32(
  <vscale x 128 x i32>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv8i32(
  <vscale x 128 x i32>,
  <vscale x 128 x i32>*,
  i64, i64)

declare <vscale x 64 x i64> @llvm.riscv.mla.m.nxv4i64(
  <vscale x 64 x i64>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv4i64(
  <vscale x 64 x i64>,
  <vscale x 64 x i64>*,
  i64, i64)





declare <vscale x 64 x half> @llvm.riscv.mla.m.nxv4f16(
  <vscale x 64 x half>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv4f16(
  <vscale x 64 x half>,
  <vscale x 64 x half>*,
  i64, i64)

declare <vscale x 32 x float> @llvm.riscv.mla.m.nxv2f32(
  <vscale x 32 x float>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv2f32(
  <vscale x 32 x float>,
  <vscale x 32 x float>*,
  i64, i64)

declare <vscale x 16 x double> @llvm.riscv.mla.m.nxv1f64(
  <vscale x 16 x double>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv1f64(
  <vscale x 16 x double>,
  <vscale x 16 x double>*,
  i64, i64)

declare <vscale x 128 x half> @llvm.riscv.mla.m.nxv8f16(
  <vscale x 128 x half>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv8f16(
  <vscale x 128 x half>,
  <vscale x 128 x half>*,
  i64, i64)

declare <vscale x 64 x float> @llvm.riscv.mla.m.nxv4f32(
  <vscale x 64 x float>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv4f32(
  <vscale x 64 x float>,
  <vscale x 64 x float>*,
  i64, i64)

declare <vscale x 32 x double> @llvm.riscv.mla.m.nxv2f64(
  <vscale x 32 x double>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv2f64(
  <vscale x 32 x double>,
  <vscale x 32 x double>*,
  i64, i64)

declare <vscale x 256 x half> @llvm.riscv.mla.m.nxv16f16(
  <vscale x 256 x half>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv16f16(
  <vscale x 256 x half>,
  <vscale x 256 x half>*,
  i64, i64)

declare <vscale x 8 x float> @llvm.riscv.mla.m.nxv8f32(
  <vscale x 8 x float>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv8f32(
  <vscale x 8 x float>,
  <vscale x 8 x float>*,
  i64, i64)

declare <vscale x 4 x double> @llvm.riscv.mla.m.nxv4f64(
  <vscale x 4 x double>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv4f64(
  <vscale x 4 x double>,
  <vscale x 4 x double>*,
  i64, i64)



declare <vscale x 64 x float> @llvm.riscv.mfwma.mm.nxv4f32.nxv4f16.nxv4f16.nxv4f32(
  <vscale x 64 x float>,
  <vscale x 64 x half>,
  <vscale x 64 x half>)

declare <vscale x 32 x double> @llvm.riscv.mfwma.mm.nxv2f64.nxv2f32.nxv2f32.nxv2f64(
  <vscale x 32 x double>,
  <vscale x 32 x float>,
  <vscale x 32 x float>)


define void @intrinsic_mlae_mfwma16_mm_msae(<vscale x 64 x half>* %0, <vscale x 64 x half>* %1, <vscale x 64 x float>* %2, i64 %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_mlae_mfwma16_mm_msae:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae16.m tr0, (a0), a3, m1
; CHECK-NEXT:    mlae16.m tr1, (a1), a3, m1
; CHECK-NEXT:    mlae32.m tr2, (a2), a3, m2
; CHECK-NEXT:    mfwma.mm tr2, tr0, tr1
; CHECK-NEXT:    msae32.m tr2, (a2), a3, m2
; CHECK-NEXT:    ret
entry:

  %5 = call <vscale x 64 x half> @llvm.riscv.mla.m.nxv4f16(
    <vscale x 64 x half>* %0,
    i64 %3, i64 0)

  %6 = call <vscale x 64 x half> @llvm.riscv.mla.m.nxv4f16(
    <vscale x 64 x half>* %1,
    i64 %3, i64 0)

  %7 = call <vscale x 64 x float> @llvm.riscv.mla.m.nxv4f32(
    <vscale x 64 x float>* %2,
    i64 %3, i64 1)

  %8 = call <vscale x 64 x float> @llvm.riscv.mfwma.mm.nxv4f32.nxv4f16.nxv4f16.nxv4f32(
    <vscale x 64 x float> %7,
    <vscale x 64 x half> %5,
    <vscale x 64 x half> %6)

  call void @llvm.riscv.msa.m.nxv4f32(
    <vscale x 64 x float> %8,
    <vscale x 64 x float>* %2,
    i64 %3, i64 1)

  ret void
}


define void @intrinsic_mlae_mfwma32_mm_msae(<vscale x 32 x float>* %0, <vscale x 32 x float>* %1, <vscale x 32 x double>* %2, i64 %3, i64 %4) nounwind {
; CHECK-LABEL: intrinsic_mlae_mfwma32_mm_msae:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae32.m tr0, (a0), a3, m1
; CHECK-NEXT:    mlae32.m tr1, (a1), a3, m1
; CHECK-NEXT:    mlae64.m tr2, (a2), a3, m2
; CHECK-NEXT:    mfwma.mm tr2, tr0, tr1
; CHECK-NEXT:    msae64.m tr2, (a2), a3, m2
; CHECK-NEXT:    ret
entry:

  %5 = call <vscale x 32 x float> @llvm.riscv.mla.m.nxv2f32(
    <vscale x 32 x float>* %0,
    i64 %3, i64 0)

  %6 = call <vscale x 32 x float> @llvm.riscv.mla.m.nxv2f32(
    <vscale x 32 x float>* %1,
    i64 %3, i64 0)

  %7 = call <vscale x 32 x double> @llvm.riscv.mla.m.nxv2f64(
    <vscale x 32 x double>* %2,
    i64 %3, i64 1)

  %8 = call <vscale x 32 x double> @llvm.riscv.mfwma.mm.nxv2f64.nxv2f32.nxv2f32.nxv2f64(
    <vscale x 32 x double> %7,
    <vscale x 32 x float> %5,
    <vscale x 32 x float> %6)

  call void @llvm.riscv.msa.m.nxv2f64(
    <vscale x 32 x double> %8,
    <vscale x 32 x double>* %2,
    i64 %3, i64 1)

  ret void
}
