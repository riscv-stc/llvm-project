; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-matrix -mattr=+experimental-v,+d,+experimental-zfh \
; RUN:   -verify-machineinstrs < %s | FileCheck %s

declare <vscale x 64 x half> @llvm.riscv.mla.m.nxv4f16(
  <vscale x 64 x half>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv4f16(
  <vscale x 64 x half>,
  <vscale x 64 x half>*,
  i64, i64)

declare <vscale x 32 x float> @llvm.riscv.mla.m.nxv2f32(
  <vscale x 32 x float>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv2f32(
  <vscale x 32 x float>,
  <vscale x 32 x float>*,
  i64, i64)

declare <vscale x 16 x double> @llvm.riscv.mla.m.nxv1f64(
  <vscale x 16 x double>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv1f64(
  <vscale x 16 x double>,
  <vscale x 16 x double>*,
  i64, i64)

declare <vscale x 64 x half> @llvm.riscv.mfmax.mm.nxv4f16(
  <vscale x 64 x half>,
  <vscale x 64 x half>,
  i64)

declare <vscale x 32 x float> @llvm.riscv.mfmax.mm.nxv2f32(
  <vscale x 32 x float>,
  <vscale x 32 x float>,
  i64)

declare <vscale x 16 x double> @llvm.riscv.mfmax.mm.nxv1f64(
  <vscale x 16 x double>,
  <vscale x 16 x double>,
  i64)

define void @intrinsic_mlae_mfmax64_msae(<vscale x 16 x double>* %0, <vscale x 16 x double>* %1, i64 %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_mlae_mfmax64_msae:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae64.m tr0, (a0), a2, m1
; CHECK-NEXT:    mlae64.m tr1, (a1), a2, m1
; CHECK-NEXT:    mfmax.mm tr0, tr0, tr1, m1
; CHECK-NEXT:    msae64.m tr0, (a0), a2, m1
; CHECK-NEXT:    ret
entry:

  %4 = call <vscale x 16 x double> @llvm.riscv.mla.m.nxv1f64(
    <vscale x 16 x double>* %0,
    i64 %2, i64 0)

  %5 = call <vscale x 16 x double> @llvm.riscv.mla.m.nxv1f64(
    <vscale x 16 x double>* %1,
    i64 %2, i64 0)

  %6 = call <vscale x 16 x double> @llvm.riscv.mfmax.mm.nxv1f64(
    <vscale x 16 x double> %4,
    <vscale x 16 x double> %5,
    i64 0)

  call void @llvm.riscv.msa.m.nxv1f64(
    <vscale x 16 x double> %6,
    <vscale x 16 x double>* %0,
    i64 %2, i64 0)

  ret void
}


define void @intrinsic_mlae_mfmax32_msae(<vscale x 32 x float>* %0, <vscale x 32 x float>* %1, i64 %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_mlae_mfmax32_msae:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae32.m tr0, (a0), a2, m1
; CHECK-NEXT:    mlae32.m tr1, (a1), a2, m1
; CHECK-NEXT:    mfmax.mm tr0, tr0, tr1, m1
; CHECK-NEXT:    msae32.m tr0, (a0), a2, m1
; CHECK-NEXT:    ret
entry:

  %4 = call <vscale x 32 x float> @llvm.riscv.mla.m.nxv2f32(
    <vscale x 32 x float>* %0,
    i64 %2, i64 0)

  %5 = call <vscale x 32 x float> @llvm.riscv.mla.m.nxv2f32(
    <vscale x 32 x float>* %1,
    i64 %2, i64 0)

  %6 = call <vscale x 32 x float> @llvm.riscv.mfmax.mm.nxv2f32(
    <vscale x 32 x float> %4,
    <vscale x 32 x float> %5,
    i64 0)

  call void @llvm.riscv.msa.m.nxv2f32(
    <vscale x 32 x float> %6,
    <vscale x 32 x float>* %0,
    i64 %2, i64 0)

  ret void
}

define void @intrinsic_mlae_mfmax16_msae(<vscale x 64 x half>* %0, <vscale x 64 x half>* %1, i64 %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_mlae_mfmax16_msae:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae16.m tr0, (a0), a2, m1
; CHECK-NEXT:    mlae16.m tr1, (a1), a2, m1
; CHECK-NEXT:    mfmax.mm tr0, tr0, tr1, m1
; CHECK-NEXT:    msae16.m tr0, (a0), a2, m1
; CHECK-NEXT:    ret
entry:

  %4 = call <vscale x 64 x half> @llvm.riscv.mla.m.nxv4f16(
    <vscale x 64 x half>* %0,
    i64 %2, i64 0)

  %5 = call <vscale x 64 x half> @llvm.riscv.mla.m.nxv4f16(
    <vscale x 64 x half>* %1,
    i64 %2, i64 0)

  %6 = call <vscale x 64 x half> @llvm.riscv.mfmax.mm.nxv4f16(
    <vscale x 64 x half> %4,
    <vscale x 64 x half> %5,
    i64 0)

  call void @llvm.riscv.msa.m.nxv4f16(
    <vscale x 64 x half> %6,
    <vscale x 64 x half>* %0,
    i64 %2, i64 0)

  ret void
}
