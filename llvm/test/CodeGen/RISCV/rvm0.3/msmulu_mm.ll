; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-matrix -mattr=+experimental-v,+d,+experimental-zfh \
; RUN:   -verify-machineinstrs < %s | FileCheck %s

declare <vscale x 128 x i8> @llvm.riscv.mla.m.nxv8i8(
  <vscale x 128 x i8>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv8i8(
  <vscale x 128 x i8>,
  <vscale x 128 x i8>*,
  i64, i64)

declare <vscale x 64 x i16> @llvm.riscv.mla.m.nxv4i16(
  <vscale x 64 x i16>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv4i16(
  <vscale x 64 x i16>,
  <vscale x 64 x i16>*,
  i64, i64)

declare <vscale x 32 x i32> @llvm.riscv.mla.m.nxv2i32(
  <vscale x 32 x i32>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv2i32(
  <vscale x 32 x i32>,
  <vscale x 32 x i32>*,
  i64, i64)

declare <vscale x 16 x i64> @llvm.riscv.mla.m.nxv1i64(
  <vscale x 16 x i64>*,
  i64, i64)

declare void @llvm.riscv.msa.m.nxv1i64(
  <vscale x 16 x i64>,
  <vscale x 16 x i64>*,
  i64, i64)

declare <vscale x 128 x i8> @llvm.riscv.msmulu.mm.nxv8i8(
  <vscale x 128 x i8>,
  <vscale x 128 x i8>,
  i64)

declare <vscale x 64 x i16> @llvm.riscv.msmulu.mm.nxv4i16(
  <vscale x 64 x i16>,
  <vscale x 64 x i16>,
  i64)

declare <vscale x 32 x i32> @llvm.riscv.msmulu.mm.nxv2i32(
  <vscale x 32 x i32>,
  <vscale x 32 x i32>,
  i64)

declare <vscale x 16 x i64> @llvm.riscv.msmulu.mm.nxv1i64(
  <vscale x 16 x i64>,
  <vscale x 16 x i64>,
  i64)

define void @intrinsic_mlae_msmulu64_msae(<vscale x 16 x i64>* %0, <vscale x 16 x i64>* %1, i64 %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_mlae_msmulu64_msae:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae64.m tr0, (a0), a2, m1
; CHECK-NEXT:    mlae64.m tr1, (a1), a2, m1
; CHECK-NEXT:    msmulu.mm tr0, tr0, tr1, m1
; CHECK-NEXT:    msae64.m tr0, (a0), a2, m1
; CHECK-NEXT:    ret
entry:

  %4 = call <vscale x 16 x i64> @llvm.riscv.mla.m.nxv1i64(
    <vscale x 16 x i64>* %0,
    i64 %2, i64 0)

  %5 = call <vscale x 16 x i64> @llvm.riscv.mla.m.nxv1i64(
    <vscale x 16 x i64>* %1,
    i64 %2, i64 0)

  %6 = call <vscale x 16 x i64> @llvm.riscv.msmulu.mm.nxv1i64(
    <vscale x 16 x i64> %4,
    <vscale x 16 x i64> %5,
    i64 0)

  call void @llvm.riscv.msa.m.nxv1i64(
    <vscale x 16 x i64> %6,
    <vscale x 16 x i64>* %0,
    i64 %2, i64 0)

  ret void
}

define void @intrinsic_mlae_msmulu_msae_nxv8i8(<vscale x 128 x i8>* %0, <vscale x 128 x i8>* %1, i64 %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_mlae_msmulu_msae_nxv8i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae8.m tr0, (a0), a2, m1
; CHECK-NEXT:    mlae8.m tr1, (a1), a2, m1
; CHECK-NEXT:    msmulu.mm tr0, tr0, tr1, m1
; CHECK-NEXT:    msae8.m tr0, (a0), a2, m1
; CHECK-NEXT:    ret
entry:

  %4 = call <vscale x 128 x i8> @llvm.riscv.mla.m.nxv8i8(
    <vscale x 128 x i8>* %0,
    i64 %2, i64 0)

  %5 = call <vscale x 128 x i8> @llvm.riscv.mla.m.nxv8i8(
    <vscale x 128 x i8>* %1,
    i64 %2, i64 0)

  %6 = call <vscale x 128 x i8> @llvm.riscv.msmulu.mm.nxv8i8(
    <vscale x 128 x i8> %4,
    <vscale x 128 x i8> %5,
    i64 0)

  call void @llvm.riscv.msa.m.nxv8i8(
    <vscale x 128 x i8> %6,
    <vscale x 128 x i8>* %0,
    i64 %2, i64 0)

  ret void
}

define void @intrinsic_mlae_msmulu_msae_nxv4i16(<vscale x 64 x i16>* %0, <vscale x 64 x i16>* %1, i64 %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_mlae_msmulu_msae_nxv4i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae16.m tr0, (a0), a2, m1
; CHECK-NEXT:    mlae16.m tr1, (a1), a2, m1
; CHECK-NEXT:    msmulu.mm tr0, tr0, tr1, m1
; CHECK-NEXT:    msae16.m tr0, (a0), a2, m1
; CHECK-NEXT:    ret
entry:

  %4 = call <vscale x 64 x i16> @llvm.riscv.mla.m.nxv4i16(
    <vscale x 64 x i16>* %0,
    i64 %2, i64 0)

  %5 = call <vscale x 64 x i16> @llvm.riscv.mla.m.nxv4i16(
    <vscale x 64 x i16>* %1,
    i64 %2, i64 0)

  %6 = call <vscale x 64 x i16> @llvm.riscv.msmulu.mm.nxv4i16(
    <vscale x 64 x i16> %4,
    <vscale x 64 x i16> %5,
    i64 0)

  call void @llvm.riscv.msa.m.nxv4i16(
    <vscale x 64 x i16> %6,
    <vscale x 64 x i16>* %0,
    i64 %2, i64 0)

  ret void
}


define void @intrinsic_mlae_msmulu_msae_nxv2i32(<vscale x 32 x i32>* %0, <vscale x 32 x i32>* %1, i64 %2, i64 %3) nounwind {
; CHECK-LABEL: intrinsic_mlae_msmulu_msae_nxv2i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mlae32.m tr0, (a0), a2, m1
; CHECK-NEXT:    mlae32.m tr1, (a1), a2, m1
; CHECK-NEXT:    msmulu.mm tr0, tr0, tr1, m1
; CHECK-NEXT:    msae32.m tr0, (a0), a2, m1
; CHECK-NEXT:    ret
entry:

  %4 = call <vscale x 32 x i32> @llvm.riscv.mla.m.nxv2i32(
    <vscale x 32 x i32>* %0,
    i64 %2, i64 0)

  %5 = call <vscale x 32 x i32> @llvm.riscv.mla.m.nxv2i32(
    <vscale x 32 x i32>* %1,
    i64 %2, i64 0)

  %6 = call <vscale x 32 x i32> @llvm.riscv.msmulu.mm.nxv2i32(
    <vscale x 32 x i32> %4,
    <vscale x 32 x i32> %5,
    i64 0)

  call void @llvm.riscv.msa.m.nxv2i32(
    <vscale x 32 x i32> %6,
    <vscale x 32 x i32>* %0,
    i64 %2, i64 0)

  ret void
}
